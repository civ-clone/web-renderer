[
{"version":"0.1.0@4607766","date":"2023-05-11T20:23:26.000Z","localChanges":["Listen for declaration terminations related to the human player.","Simplify `Unit` action handling.","Prevent `autoEndOfTurn` when `CivilDisorder` notification is shown.","Trigger `Action`s from the `Actions` `Element` to try and avoid leaks.","Simplify a lot of translations and fix `City` names containing quotes from displaying incorrectly.","Allow assets to be incrementally imported.","Ensure city names are rendered correctly when cities are at the bottom of the map.","Implement `GoTo` (only available with a long press on the map at the moment)."],"externalChanges":{"base-unit-action-embark":{"status":"updated","log":["Add a `Stowed` `Busy` `Rule` and ensure the `sourceTile` is provided for the `TransportManifest`."]},"base-unit-action-goto":{"status":"added","log":["Initial commit","Correctly terminate the `GoTo` status when arriving at the target `Tile`."]},"base-unit-carrier":{"status":"updated","log":["Remove `capacity` in favour of `Rule` based approach."]},"base-unit-frigate":{"status":"updated","log":["Remove `capacity` in favour of `Rule` based approach."]},"base-unit-sail":{"status":"updated","log":[]},"base-unit-transport":{"status":"updated","log":["Remove `capacity` in favour of `Rule` based approach."]},"base-unit-trireme":{"status":"updated","log":[]},"base-unit-type-naval-transport":{"status":"updated","log":["Rebuild assets as these were broken in the last release. :("]},"civ1-asset-extractor":{"status":"updated","log":["Export more of the types used."]},"civ1-city-improvement":{"status":"updated","log":["Update to utilise `library-city`."]},"civ1-city":{"status":"updated","log":["Update to use `library-city`."]},"civ1-civilization":{"status":"updated","log":["Updates to utilise `library-civilization`."]},"civ1-diplomacy":{"status":"updated","log":["Add `Expired` `Rule`s to alert when \"AI\" players break `Peace`.","Add closer for the player when `Peace` hasn't been offered/`Accept`ed."]},"civ1-government":{"status":"updated","log":["Updates to utilise `library-government`."]},"civ1-player":{"status":"updated","log":["Prevent exceptions in `TurnStart` `Rule`s from breaking the gameplay."]},"civ1-science":{"status":"updated","log":["Update to utilise `library-science` and adjust `City` `Captured` `Rule` to allow `Client`s to `chooseFromList`."]},"civ1-spaceship":{"status":"updated","log":["Update to use latest version of `core-spaceship` where `flightTime` returns estimated number of years, instead of target `Turn`."]},"civ1-treasury":{"status":"updated","log":["Remove unneeded type hints on `getRules` functions."]},"civ1-unit":{"status":"updated","log":["Add `CanStow`, `Capacity` and `CargoWeight` `Rule`s and associated tests.","Add `GoTo` action."]},"civ1-world":{"status":"updated","log":["Updates to utilise `library-world`."]},"core-diplomacy":{"status":"updated","log":["Add `Expired` `Rule`, triggered when a `Declaration` is `expired`."]},"core-spaceship":{"status":"updated","log":["Update `flightTime` to return estiamted number of years for the flight."]},"core-strategy":{"status":"added","log":["Initial commit","Initial version","Add the concept of `Routine`s which are tried in sequence within each `Strategy`.","Add `StrategyNote`s to be used as a memo for arbitrary data (storing which units for this player are exploring certain areas for example.","Added tests.","Add `Created` `Rule` for `Strategy`s.","Assocaite `Player` to each `Strategy` on instantiation.","Have `Routine.priority()` managed via `Rule`s.","Have `Strategy.priority()` managed via `Routine`s.","Remove `Strategies`, adding the functionality to `StrategyRegistry`.","Make `StrategyNote` retrieval methods generic.","Simplify `Routine`s and `Strategy`s.","Ensure `StrategyRegistry` can only have one of each `StrategyNote` key.","Remove `canHandle` from `Strategy` and `Routine`.","Add example implementation details to `README.md`.","Fix `StrategyNoteRegistry.register`.","Add `StrategyNoteRegistry.replace`.","Make `attempt` synchronous.","Repo cleansing.","Work in progress - rewriting AI mechanism."]},"core-unit-transport":{"status":"updated","log":["Add a `sourceTile` to the `TransportManifest` to track the point of origin for the cargo. This can be used and compared by AI routines when considering `Unload`ing the cargo.","Add `isTransport` method to check if instances of classes are `Transport`s.","Handle `capacity` via `Rule`s. This could allow more complex (weight-based) capacity calculations.","Add restrictions on what a `Transport` `CanStow` using `Rule`s."]},"core-world":{"status":"updated","log":["Add `LandMass` and `LandMassRegistry` to be populated via `World` `Built` `Rule`s (or as part of the `Generator`?) to distinguish different `LandMass`es.","Add `LandMassRegistry` `instance`.","Fix `LandMass` returning to using `Tile`s as the references point (as `Terrain`s can be changed) and add code to `World` to populate `LandMass` objects."]},"library-city":{"status":"added","log":["Initial commit","Add `CityImprovementMaintenanceGold`.","Fix bug where there are no `Tile`s available to add to the `workedTiles`."]},"library-civilization":{"status":"added","log":["Initial commit","Fix breaking build."]},"library-unit":{"status":"updated","log":["Add `GoTo` `Unit` `Action`."]},"library-government":{"status":"added","log":["Initial commit","Add `Revolution` `PlayerAction`."]},"library-science":{"status":"added","log":["Initial commit"]},"library-world":{"status":"added","log":["Initial commit"]},"simple-ai-client":{"status":"updated","log":["Update to include more game rules and allow completing `Research` and acquiring `Gold`.","Add basic `shouldAttack` logic so that AI can break `Peace`.","Remove the duplicate `Path` generation to reduce CPU usage."]},"simple-world-generator":{"status":"updated","log":["Update to use `library-world` instead of `civ1-world`."]},"simple-world-path":{"status":"updated","log":["Ensure `PathFinder` is registered when the package is included in the project.","Simplify the path finding work to reduce CPU costs."]}}}
,
{"version":"0.1.0@8a11546","date":"2023-04-25T18:45:15.000Z","localChanges":["Fix empty landing page as reported by user \"King of Persia\" on CivFanatics forums."],"externalChanges":{}}
,
{"version":"0.1.0@5e59c26","date":"2023-04-14T19:15:22.000Z","localChanges":["Major update to many areas of the UI making it all translatable.","","- Add translations via i18next.","- Animate the `End turn` button.","- Style the `PopupMenu`s.","- Add modal `Window`s.","- Add timeout to ensure `Negotiation`s with `AIClient` don't hang.","- Update enemy `City` details (before these were static in error).","- Ensure a notification is triggered when a `City` cannot support a `Unit`.","- Fixed a range of bugs with `Negotiation`s.","- Added support for using multiple `PlayerTreasury`s (e.g. for future work with `Faith`)","- Fix missing warning on Mac for reloading the page.","- Add efficiencies in which `Tile`s are redrawn when the `Map` layers are built.","- Fix a few bugs with `Window`s and ensure notifications are triggered when another is closed.","- Replace `InactiveUnit` menu with icons and ensure they update when toggled.","- Cache `Unit` images when they have had their colours replaced."],"externalChanges":{"base-civilization-american":{"status":"updated","log":["Remove repeated `City` names."]},"base-civilization-chinese":{"status":"updated","log":["Remove anchor markers from `City` names."]},"base-civilization-french":{"status":"updated","log":["Remove repeated `City` names."]},"base-civilization-greek":{"status":"updated","log":["Remove repeated `City` names."]},"base-civilization-indian":{"status":"updated","log":["Remove repeated `City` names."]},"base-civilization-roman":{"status":"updated","log":["Remove repeated `City` names."]},"base-unit-action-attack":{"status":"updated","log":["Ensure `Moved` `Rule` is triggered after a `Unit` `Attack`s."]},"base-unit-action-disband":{"status":"updated","log":["Ensure `Moved` `Rule` is triggered after a `Unit` is `Disband`ed."]},"base-unit-action-unload":{"status":"updated","log":["Ensure `Moved` `Rule` is triggered after a `Unit` `Unload`s its `cargo`."]},"civ1-city":{"status":"updated","log":["Ensure the `Unit`s farthest away from the `City` are lost when they are unable to be supported."]},"civ1-diplomacy":{"status":"updated","log":["Ensure that once an `ExchangeKnowledge` `Proposal` is `Decline`d it will stop being offered, include the available `Advance`s in the `Proposal` contents, allow the discussion to be passed back to the other player as per the original game and allow each `Player` to select the desired `Advance`s when exchanging."]},"civ1-goody-hut":{"status":"updated","log":["Ensure the `goody-hut:discovered` event is triggered before the effect of the `GoodyHut` itself.","Remove `Priority` as this isn't doing anything!"]},"civ1-player":{"status":"updated","log":["Remove unneeded debug."]},"civ1-treasury":{"status":"updated","log":["Ensure `Gold` is properly handled when processing the `City` `Yield`s. When you don't have enough `Gold` in your `PlayerTreasury` to support a `CityImprovement` it will be sold."]},"civ1-unit":{"status":"updated","log":["Ensure `SneakAttack` and `SneakCaptureCity` actually expire any active `Peace` `Declaration`s."]},"core-diplomacy":{"status":"updated","log":["Ensure `when` is exposed for `Interaction`s and Make `Propsal`.`resolve` return a `Promise` so that the `Resolved` `Rule`s can be `await`ed."]},"core-goody-hut":{"status":"updated","log":["Ensure `ActionPerformed` `Rule` is triggered before the action itself, this ensures that the \"You have discovered scrolls of ancient wisdom\" message can be displayed before the advance is discovered."]},"library-diplomacy":{"status":"updated","log":["Store, and expose, the advances available to the `for` `Player`s when an `ExchangeKnowledge` `Proposal` is created. This allows the data to be used in the front end messaging as in: \"We note that your primitive civilisation has not discovered Writing.\""]},"simple-ai-client":{"status":"updated","log":["Add timeout mechanism to avoid hangs when multiple `AIClient`s are in `Negotiation`s."]}}}
,
{"version":"0.1.0@d2b84be","date":"2023-04-04T13:59:57.000Z","localChanges":["Implement negotiations with enemy players. This is very primitive at the moment and the AI will always offer, and respect, `Peace`."],"externalChanges":{"base-unit-action-disband":{"status":"updated","log":["Repo cleansing.","Add missing transpiled JS, definition and map files."]},"base-unit-action-found-city":{"status":"updated","log":["Repo cleansing.","Ensure `WorkedTileRegistry` is passed onto the `City` constructor."]},"civ1-diplomacy":{"status":"updated","log":["Add in `Negotiation`-related `Rule`s."]},"civ1-player":{"status":"updated","log":["Update `Built` `Rule`s to handle new `Client` changes for `chooseFromList` instead of `chooseCivilization` and `chooseLeader`."]},"civ1-unit":{"status":"updated","log":["Refactor to utilise `library-unit` package.","Add `SneakAttack` and `SneakCaptureCity` so these can be avoided/warned about when `Player`s have `Peace` `Declaration`.","Ensure `WorkedTileRegistry` is passed to the `FoundCity` constructor."]},"core-ai-client":{"status":"updated","log":["Simpliy AIClient base class."]},"core-client":{"status":"updated","log":["Add `chooseFromList` `Client` method.","Add supplemental data to `ChoiceMeta` objects."]},"core-diplomacy":{"status":"updated","log":["Add `active`, `expire` and `expiry` methods to `Declaration`s.","Make `Expiry` a simpler class that can be instantiated with a specific end turn.","Add `when` to `Interaction`s.","Add `Negotiation` alongside `Proposal` and `Resolution`, and some base implementations of each."]},"library-diplomacy":{"status":"added","log":["Initial commit"]},"library-unit":{"status":"added","log":["Initial commit","Add missing `UnitImprovement`."]},"simple-ai-client":{"status":"updated","log":["Add diplomacy support (`Negotiation`s)."]},"web-renderer":{"status":"removed"}}}
,
{"version":"0.1.0@0978f23","date":"2023-02-22T19:25:40.000Z","localChanges":["Refactor `Transport` class to make it easier to prefill and type the arguments to send/receive and reduce errors."],"externalChanges":{}}
,
{"version":"0.1.0@9be9ab0","date":"2023-01-29T19:10:23.000Z","localChanges":["Fix `UnitActionMenu` on touch devices."],"externalChanges":{}}
,
{"version":"0.1.0@dc2cd0d","date":"2023-01-27T20:50:34.000Z","localChanges":["Refactor `UnitActionMenu` into `PopupMenu` for re-use.","Refactor the `Action` buttons into their own item similar to Civ5 style buttons.","Add a `GameOptions` menu to allow controlling the `EndOfTurn` action.","Add UI method to get access to the various reports.","Rework the `HappinessReport` to show a breakdown of the reasons for `Happiness`/`Unhappiness`.","Fix bug for `SelectionWindow`s with one item did not close using [Enter].","Additional updates and minor bugfixes."],"externalChanges":{"civ1-city-happiness":{"status":"updated","log":["Only announce `CelebrateLeader` on start and end, not every `Turn`."]},"civ1-trade-rate":{"status":"updated","log":["Use whole integers for `TradeRate` values instead of floats as per updates to `core-trade-rate`."]},"core-data-object":{"status":"updated","log":["Add `__` property for plain objects that includes their parent classes."]},"core-trade-rate":{"status":"updated","log":["Repo cleansing.","Update to use integers instead of floats to avoid floating point discrepencies throwing exceptions (e.g. `(0.2 + 0.7 + 0.1) !== 1`)."]}}}
,
{"version":"0.1.0@1e76df3","date":"2023-01-20T22:09:39.000Z","localChanges":["Refactor `SelectionWindow` into `ActionWindow`.","Add `CivilDisorder` `ActionWindow`.","Show `Unworkable` `Tile`s in the `City` view.","Update `<buttons/>` for `CityBuild` and `ChooseResearch` to look more like Civ 5.","Re-work `Actions` to filter `Action`s to top/bottom section more reliably.","Use `LocaleProvider` to format numbers."],"externalChanges":{"civ1-city-happiness":{"status":"updated","log":["Add `CivilDisorder` `PlayerAction` which allows viewing the `City` in `CivilDisorder`."]},"civ1-city":{"status":"updated","log":["Update `core-city` and add `Rule`s around `WorkedTile`s.","Fix logic for selecting `WorkedTile`s."]},"civ1-unit":{"status":"updated","log":["Ensure `Air` `Unit`s can reset their status by `Embark`ing in a `Transport`."]},"core-city":{"status":"updated","log":["Add `WorkedTile` and `WorkedTileRegistry` and associated `Rule`s.","Ensure `City` `Tile`s are selected via `Rule`s."]}}}
,
{"version":"0.1.0@d4a32a4","date":"2023-01-17T22:01:12.000Z","localChanges":["Bump dependencies and update UI to match."],"externalChanges":{"base-goody-hut-gold":{"status":"updated","log":["Update to latest version of `core-treasury`."]},"civ1-city-happiness":{"status":"updated","log":["Update `CivilDisorder` and `CelebrateLeader` `Rule`s to be closer to original Civilization.","Trigger an event when `CivilDisorder` or `CelebrateLeader` are reverted.","Add `CelebrateLeader` effect (`City` grows each turn)."]},"civ1-city":{"status":"updated","log":["Update to latest version of `core-city-happiness`."]},"civ1-science":{"status":"updated","log":["Update to latest version of `core-city-happiness`."]},"civ1-spaceship":{"status":"updated","log":["Update to latest version of `core-treasury`."]},"civ1-treasury":{"status":"updated","log":["Ensure `CompleteProduction` `PlayerAction` contains `CityBuild` instead of `City`.","Update to use latest version of `core-treasury` and `core-city-happiness`."]},"civ1-unit":{"status":"updated","log":["Remove dependency on `civ1-science` and import each advance separately.","Fix `Fighter`, `Nuclear` and `Bomber` behaviour (`LostAtSea` to be replaced)."]},"civ1-wonder":{"status":"updated","log":["Ensure `Nuclear` can only be built once `ManhattanProject` has been built by any player."]},"core-city-happiness":{"status":"updated","log":["Add `civilDisorder` and `celebrateLeader` `AdditionalData` to `City`s.","Make `CivilDisorder` and `CelebrateLeader` return `boolean` instead of being `validate` only `Rule`s."]},"core-treasury":{"status":"updated","log":["Generalise `PlayerTreasury` to allow storage of any `Yield`.","Add `spendCost` `AdditionalData` to `CityBuild`s.","Add `Rush` `Rule` triggered when `CompleteProduction` is called.","Update `Spend` `Rule` to return `SpendCost` value object instead of modifying a `Yield`."]},"simple-ai-client":{"status":"updated","log":["Update to latest version of `core-treasury`."]}}}
,
{"version":"0.1.0@b6d38dd","date":"2023-01-13T08:40:36.000Z","localChanges":["Add beginnings of a touch compatible interface for moving `Unit`s."],"externalChanges":{}}
,
{"version":"0.1.0@fb75d4d","date":"2023-01-13T08:37:10.000Z","localChanges":["Add changelog mechanism and populate with historic data."],"externalChanges":{}}
,
{"version":"0.1.0@8cae915","date":"2023-01-05T19:45:55.000Z","localChanges":["Change `docker-compose` port to avoid local conflicts.","Add `civ1-spaceship` - this enables building `Spaceship` components. (Note: victories are not yet implemented!)","Add `Spaceship` `Window` to display details and allow launch.","Add `LocaleProvider` class to wrap convenience methods for lists and number formatting.","Update lib version to support `es2021.intl`.","Refactor `Actions` to automatically import non-`MandatoryAction`s."],"externalChanges":{"base-player-action-launch-spaceship":{"status":"added","log":["Initial commit"]},"base-spaceship-fuel":{"status":"added","log":["Initial commit"]},"base-spaceship-habitation":{"status":"added","log":["Initial commit"]},"base-spaceship-life-support":{"status":"added","log":["Initial commit"]},"base-spaceship-power":{"status":"added","log":["Initial commit"]},"base-spaceship-propulsion":{"status":"added","log":["Initial commit"]},"base-spaceship-structural":{"status":"added","log":["Initial commit"]},"base-spaceship-yield-energy":{"status":"added","log":["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"base-spaceship-yield-life-support":{"status":"added","log":["Initial commit","Add `AdditionalData` to `Spaceship`s.","Update to use npm version of core-spaceship."]},"base-spaceship-yield-mass":{"status":"added","log":["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"base-spaceship-yield-population":{"status":"added","log":["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"civ1-city-happiness":{"status":"updated","log":["Bump dependencies."]},"civ1-default-spaceship-layout":{"status":"added","log":["Initial commit"]},"civ1-spaceship":{"status":"added","log":["Initial commit","Move default `Layout` to its own repo and make it a class instead of an instance.","Add a `Player` `Action` for launching the `Spaceship`.","Remove unused variable in tests.","Add `LaunchSpaceship` `PlayerAction`.","Add `Spend` `Rule`s for `Part`s.","Add `Active` `Rule`s for `Slot`s.","Add `Landed `Rule`s for `Spaceship`.","Add `Turn` `Start` `Rule`s` to check if `Spaceship` is `Landed` or `Lost`.","Ensure `Spaceship` `Part`s cannot be built when a `Spaceship` is in-flight.","Use updated `LayoutRegistry`.","Update updated `Active` `Slot` mechanism."]},"core-spaceship":{"status":"added","log":["Initial commit","Add `yield` to `Spaceship`.","Add `SpaceshipRegistry`.","Add `spaceship` key to `Player`s as `AdditionalData`.","Re-work `Spaceship` and `Part` `yields`.","Add `Validation` `Rule` to prevent adding unusable `Part`s.","Add `chanceOfSuccess` method.","Add `Layout`, `LayoutRegistry` and `Slot` entities, and update `Spaceship` to use them.","Update layout registry to store constructors instead of instances.","Ensure `Layout` is included when `Spaceship` is converted to `PlainObject`.","Ensure `AdditionalData` is correctly registered.","Add index.js entrypoint.","Break down `Slot`s in a `Layout` into active and inactive.","Replace `Validate` `Rule` with `Active`.","Add `activeParts` and `inactiveParts` to `Spaceship`."]}}}
,
{"version":"0.1.0@a999e22","date":"2022-12-05T21:31:36.000Z","localChanges":["Support numpad movement on macOS using a non-Apple keyboard."],"externalChanges":{}}
,
{"version":"0.1.0@39cbaeb","date":"2022-12-04T21:22:23.000Z","localChanges":["Feed back about requiring all asset files when generating assets."],"externalChanges":{}}
,
{"version":"0.1.0@7ea1d26","date":"2022-11-25T21:12:28.000Z","localChanges":["Fix missing `Import assets` menu item."],"externalChanges":{}}
,
{"version":"0.1.0@be9ad8d","date":"2022-11-25T11:01:29.000Z","localChanges":["Bump dependencies."],"externalChanges":{"base-city-yield-martial-law-content":{"status":"updated","log":["Ensure `unit` key is exposed."]},"civ1-city-improvement":{"status":"updated","log":["Destroy `CityImprovement`s when a `City` is `Captured` or `Destroyed`."]},"civ1-city":{"status":"updated","log":["Track `destroyed` status rather than unregister the `City`."]},"civ1-player":{"status":"updated","log":["Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-unit":{"status":"updated","log":["Use `IBuildable` interface for `BuildingComplete` `Rule`s.","Ensure `Submarine`s cannot bombard `Land` `Unit`s.","Ensure only `Fighter`s can `Attack` other `Air` `Unit`s.","Annotate `Attack` `Action` `Rule`s.","Ensure all `Unit`s on a `Tile` are destroyed when the defending `Unit` is `Destroyed`, unless in a `City`.","Track `destroyed` status rather than unregister the `Unit`."]},"civ1-wonder":{"status":"updated","log":["Ensure `IBuildable` interface is used.","Add benefits for `DarwinsVoyage`."]},"core-city-build":{"status":"updated","log":["Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-improvement":{"status":"updated","log":["Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{"status":"updated","log":["Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-data-object":{"status":"updated","log":["Make `IDataObject` interface more flexible."]},"core-unit-transport":{"status":"updated","log":["Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{"status":"updated","log":["Track `destroyed` status rather than unregister the `Unit`."]}}}
,
{"version":"0.1.0@55c0fae","date":"2022-11-22T21:24:59.000Z","localChanges":["Remove fixed `Window` width.","Ensure `GameData` variable in `Renderer` is updated.","Add initial `CityStatus` (`F1`), `HappinessReport` (`F4`) and `ScienceReport` (`F6`) screens.","Simplify `City` screen component, moving out some parts to shared lib files or components."],"externalChanges":{"base-city-yield-city-improvement-content":{"status":"updated","log":["Ensure `CityImprovement` is exposed."]}}}
,
{"version":"0.1.0@9efb4a2","date":"2022-11-21T21:48:43.000Z","localChanges":["Add favicon."],"externalChanges":{}}
,
{"version":"0.1.0@4cb5589","date":"2022-11-21T21:04:26.000Z","localChanges":["Use `@dom111/Element` instead of a divergent package in the repo.","An attempt to resize the `Yield` images when there are too many to fit in the available space.","Add build version information to the landing page.","Inline the `Window` button images.","Clean up source files (remove unncessary `public` declarations.)","Prevent accidental page reloads.","Remove code clean up (return to leaking memory...) to speed up later game.","Fix growth details in `City` screen.","Fix number of turns shown on `CityBuildSelectionWdindow`.","Fix inheritence for `Window` and children.","Fix `Portal` centering bug.","Fix `Gold` and `Research` per turn indicator in sidebar.","Allow `Window` elements to be moved."],"externalChanges":{"civ1-earth-generator":{"status":"updated","log":["Refactor `Earth` start `Tile`s to use the `Regitry` mechanism."]},"civ1-world":{"status":"updated","log":["Use updated `civ1-earth-generator` package."]}}}
,
{"version":"0.1.0@ad66e17","date":"2022-11-17T12:49:59.000Z","localChanges":["Add warning about generating assets on Brave.","Ensure `Earth` `MainMenu` option is hidden when the assets are missing."],"externalChanges":{}}
,
{"version":"0.1.0@7fce207","date":"2022-11-16T21:56:29.000Z","localChanges":["Ensure all assets are loaded before trying to use the curosr.","Add `Earth` `World` `Generator`.","Only trigger `City` screen for `Player`s `City`s.","Only focus the `<select/>` in a `SelectionWindow` if there is more than one item."],"externalChanges":{"civ1-asset-extractor":{"status":"updated","log":["Add `Map` class and `extractMap` script to convert Civ 1 `*.MAP` (or `MAP.PIC`) files to RLE representations."]},"civ1-earth-generator":{"status":"added","log":["Initial commit","Refactor `Earth` start `Tile`s to use the `Regitry` mechanism."]},"civ1-player":{"status":"updated","log":["Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s."]},"civ1-world":{"status":"updated","log":["Add support for `Earth` `Generator` and fixed start `Tile`s associated.","Move random start `Tile` selection to `Rule`s."]},"core-player":{"status":"updated","log":["Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-world-generator":{"status":"updated","log":["Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"simple-ai-client":{"status":"updated","log":["Add hard-coded check for `Earth` map to ensure first `City` is built in the right place."]},"simple-world-generator":{"status":"updated","log":[]}}}
,
{"version":"0.1.0@575f690","date":"2022-11-15T20:13:36.000Z","localChanges":["Remove unused packages from esbuild.js.","Fix `Yield`s not being rendered in `City` screen."],"externalChanges":{}}
,
{"version":"0.1.0@4c67745","date":"2022-11-15T17:00:58.000Z","localChanges":["Reorganise the repo to make it easier to navigate.","Add `AssetStore`.","Use `AssetStore` assets instead of hard-coded links to images.","Break down `MainMenu` into smaller pieces.","Customise esbuild process.","Ensure `Transport` is passed in directly, instead of relying on a global object."],"externalChanges":{"base-unit-action-disband":{"status":"added","log":["Initial commit","Repo cleansing."]},"civ1-asset-extractor":{"status":"added","log":["Initial commit","Updates to fix the incorrect padding around elements.","Fix misnamed assets.","Refactor to allow usage within a browser context.","Add `Map` class and `extractMap` script to convert Civ 1 `*.MAP` (or `MAP.PIC`) files to RLE representations."]},"civ1-player":{"status":"updated","log":["Refactor out `Worker`. This probably needs to be added back in at some point..."]},"civ1-science":{"status":"updated","log":["Remove unnecessary `Registry` interface."]},"civ1-treasury":{"status":"updated","log":["Remove unnecessary `Registry` interface."]},"civ1-unit":{"status":"updated","log":["Add `Disband` `Action`."]},"core-data-object":{"status":"updated","log":["Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing."]},"core-engine":{"status":"updated","log":["Remove reliance on `node` so that a browser can be used instead."]},"core-turn-based-game":{"status":"updated","log":["Ensure return types match for TypeScript compiler."]},"simple-world-generator":{"status":"updated","log":["Remove reliance on `node` so that a browser can be used instead."]}}}
,
{"version":"0.1.0@425962f","date":"2022-11-12T23:14:56.000Z","localChanges":["Remove unused logging.","Add `Customise world` option to `MainMenu`.","Fix bug where `Portal` would be re-centered even when map is fully displayed on screen."],"externalChanges":{}}
,
{"version":"0.1.0@4f027f6","date":"2022-11-10T22:14:42.000Z","localChanges":["Initial version of web-renderer."],"externalChanges":{}}
,
{"version":"0.1.0@93bb88d","date":"2022-11-09T21:54:44.000Z","localChanges":["Ensure `City` `Yield`s are updated when `Unit`s are moved or destroyed.","Update `City` display screen to be closer to the original game."],"externalChanges":{"base-city-yield-city-improvement-maintenance-gold":{"status":"updated","log":["Make class extend `Gold` `Yield` and store the value negated."]},"base-city-yield-city-improvement-content":{"status":"added","log":["Initial commit","Ensure `CityImprovement` is exposed."]},"base-city-yield-corruption":{"status":"updated","log":["Make class extend `Trade` `Yield` and store the value negated."]},"base-city-yield-population-support-food":{"status":"updated","log":["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-luxury-happiness":{"status":"added","log":["Initial commit"]},"base-city-yield-martial-law-content":{"status":"added","log":["Initial commit","Ensure `unit` key is exposed."]},"base-city-yield-military-unhappiness":{"status":"added","log":["Initial commit","Ensure `unit` key is exposed when the `Yield` is exported as raw data."]},"base-city-yield-population-unhappiness":{"status":"added","log":["Initial commit"]},"base-city-yield-unit-support-food":{"status":"updated","log":["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-production":{"status":"updated","log":["Make class extend `Production` `Yield` and store the value negated."]},"base-goody-hut-unit":{"status":"updated","log":["Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-player-action-active-unit":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-adjust-trade-rates":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-inactive-unit":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-revolution":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-unit-action-attack":{"status":"updated","log":["Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-forest":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-embark":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{"status":"updated","log":["Ensure local `RuleRegistry` is passed on to `City` constructor."]},"base-unit-action-move":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-pillage":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-type-naval-transport":{"status":"updated","log":["Update to use latest `core-unit-transport` changes."]},"civ1-city-happiness":{"status":"updated","log":["Bump dependencies.","Consolidate `Cost` `Rule`s.","Remove unused `Rule` classes.","Rewrite to use customised `Yield`s for each property.","Update to latest version of `core-city-improvement`."]},"civ1-city-improvement":{"status":"updated","log":["Reclassify `CityImprovementMaintenanceGold` `Yield` `Rule`s as `Cost` `Rule`s.","Ensure `Corruption` is provided as expected`.","Add some basic cleanup for when `City`s are destroyed.","Update to latest version of `core-city-improvement`.","Move `Corruption` generation to `civ1-city`, where it makes more sense to exist.","Work on test coverage.","Bump dependencies."]},"civ1-city":{"status":"updated","log":["Update `CityBuild` and `ChangeProduction` instantiations with new `PlayerAction` changes.","Ensure when a `Unit` is defeated in a `City` that the population is only reduced when it's a defender.","Use `FoodExhausted` and `Unsupported` `Rule`s.","Refactor `Yield`, `Cost` and `ProcessYield` `Rule` usages.","Update `ProcessYield` usage.","Use updated `CityRegistry.getByTile` method.","Update `setUpCity` mechanism.","Ensure `Irrigation` and `Road` `TileImprovement`s are only added if they don't already exist.","Update `setUpCity` to allow bypassing of `TileImprovement` additions.","Move `Corruption` generation from `civ1-city-improvement`.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Improve test coverage."]},"civ1-civilization":{"status":"updated","log":["Repo cleansing."]},"civ1-goody-hut":{"status":"updated","log":["Update to use latest `CityRegistry` changes.","Update usages of `Math.random` to be an injectable number provider.","Another attempt at the `City` type of `GoodyHut`."]},"civ1-government":{"status":"updated","log":["Update `Revolution` instantiation with new `PlayerAction` changes."]},"civ1-player":{"status":"updated","log":["Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`."]},"civ1-science":{"status":"updated","log":["Update `ChooseResearch` instantiation with new `PlayerAction` changes.","Update dependencies.","Add unit tests.","Ensure `@civ-clone/core-city-happiness` is used as a module, not a github repo.","Add `randomNumberGenerator` provider for `captured` `Rule`."]},"civ1-trade-rate":{"status":"updated","log":["Update `AdjustTradeRates` instantiation with new `PlayerAction` changes.","Ensure `Corruption` can never exceed the available `Trade`.","Add `Player` `turn-start` `Rule` to convert `Trade` into the component `Yield`s."]},"civ1-treasury":{"status":"updated","log":["Update `CompleteProduction` instantiation with new `PlayerAction` changes.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo."]},"civ1-unit":{"status":"updated","log":["Update `ActiveUnit` and `InactiveUnit` instantiations with new `PlayerAction` changes.","Use `Unsupported` and `Stowed` `Rule`s.","Ensure `Sail` is obselete with `Magenetism`.","Simplify and clarify `Move` action constraints.","Clean up when `Unit` is `Destroyed`.","Add better test coverage.","Add missing `MovementCost`s and use named re-usable `Criterion`s for `Action` `Rule`s where possible.","Ensure `Air` `Unit`s can attack `Land` `Unit`s."]},"civ1-wonder":{"status":"updated","log":["Use updated `Yield` mechanism.","Add `CureForCancer` effects.","Add obsoletion for `Lighthouse`.","Rework the tests.","Update to remove requirement for `Player` to be passed into the `Wonder` constructor.","Fix some wonder effects.","Ensure `engine` parameter of `Wonder` `obsolete` `Rule`s is optional.","Add `Wonder` `obsolete` `Rule`s."]},"civ1-world":{"status":"updated","log":["Update calls to `Math.random` to be an injectable random number generator.","Ensure `Road` and `Railroad` are not applied multiple times."]},"core-ai-client":{"status":"updated","log":["Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{"status":"updated","log":["Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s."]},"core-city-growth":{"status":"updated","log":["Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies."]},"core-city-happiness":{"status":"updated","log":["Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{"status":"updated","log":["Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead."]},"core-city":{"status":"updated","log":["Change `CityRegistry.getByTile` to return `City` instead of `City[]`."]},"core-civilization":{"status":"updated","log":["Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-data-object":{"status":"updated","log":["Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage."]},"core-game-year":{"status":"updated","log":["Simpliy `Rule`s."]},"core-goody-hut":{"status":"updated","log":["Simpliy `Rule`s."]},"core-government":{"status":"updated","log":["Simpliy `Rule`s."]},"core-player-world":{"status":"updated","log":["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{"status":"updated","log":["Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename."]},"core-registry":{"status":"updated","log":["Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{"status":"updated","log":["Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{"status":"updated","log":["Simpliy `Rule`s."]},"core-terrain-feature":{"status":"updated","log":["Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{"status":"updated","log":["Simpliy `Rule`s."]},"core-tile-improvement":{"status":"updated","log":["Simpliy `Rule`s."]},"core-treasury":{"status":"updated","log":["Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{"status":"updated","log":["Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`."]},"core-unit-transport":{"status":"updated","log":["Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies."]},"core-unit":{"status":"updated","log":["Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings."]},"core-wonder":{"status":"updated","log":["Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world":{"status":"updated","log":["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{"status":"updated","log":["Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{"status":"updated","log":["Update dependencies and fix tests."]},"simple-world-generator":{"status":"updated","log":["Ensure `TerrainFeatureRegistry` is passed in to `simpleRLELoader`.","Replace `Math.random` calls with injectable random number generator."]}}}
,
{"version":"0.1.0@7df4e13","date":"2022-04-07T20:46:58.000Z","localChanges":["Add messaging for unsupported `Unit`s, `City` size decreases, etc."],"externalChanges":{"base-city-yield-corruption":{"status":"added","log":["Initial commit","Make class extend `Trade` `Yield` and store the value negated."]},"civ1-city-improvement":{"status":"updated","log":["Add `Corruption` `Yield` and `Effect`s of `Palace` and `Courthouse`.","Ensure `Palace` is destroyed when a `City` is captured."]},"civ1-city":{"status":"updated","log":["Process `Unit` and population support (`Food` and `Production`)."]},"civ1-trade-rate":{"status":"updated","log":["Implement `Corruption` `Effect`s."]},"civ1-treasury":{"status":"updated","log":["Handle running out of `Gold` in the treasury by selling the maintained `CityImprovement` that would deplete it."]}}}
,
{"version":"0.1.0@deeed3f","date":"2022-04-06T20:36:41.000Z","localChanges":["Implement `GamePortal` to begin to remove the inline code from `renderer.ts`.","Replace TypeScript generated modules with an ESBuild bundle.","Beginnings of work to separate the view code from the `ElectronClient` package."],"externalChanges":{}}
,
{"version":"0.1.0@1d0e3e5","date":"2022-04-04T21:04:11.000Z","localChanges":["Add confirmation dialog when quitting.","Re-enable map cheat.","Add a fudge for `ReassignWorkers` action.","Work on having `SelectionWindow`s automatically sized to fit available options.","Allow `Escape` to return focus to the map when `Action`s are selected.","Fix occasional bug with `TradeRates` sliders \"not adding up to 1\".","Show how many turns the `CityBuild` item will take.","Consolidate the `Yield`s shown in `City` view and show a breakdown with the providers for further inspection.","Allow positioning adjustments in `Map`s.","Adjust position of `Shield`s and the `City` tile.","Sort the `Yield`s when displayed in a `Map`.","Fix the `visibleRange` behaviour in the `Portal`.","Show `Tile` info (`Terrain`, `Feature`s, `Improvement`s) in `UnitDetails`.","Refactor `ActiveUnit` handling - still some work to do here when activating another unit.","Implement `w`ait key functionality.","Display `Unit` `Busy` status.","Fix bug where the `Minimap` wasn't updating in some circumstances."],"externalChanges":{"base-city-yield-city-improvement-maintenance-gold":{"status":"added","log":["Initial commit","Make class extend `Gold` `Yield` and store the value negated."]},"base-city-yield-population-support-food":{"status":"added","log":["Initial commit","Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-food":{"status":"added","log":["Initial commit","Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-production":{"status":"added","log":["Initial commit","Make class extend `Production` `Yield` and store the value negated."]},"civ1-city-happiness":{"status":"updated","log":["Update to use new `Yield` mechanism. Actually, it was in part due to this module that the mechanism changed...","Fix a bug where `CivilDisorder` effects were applied even if the `City` wasn't in civil disorder.","Remove `CivilDisorder` `Yield` effects and move those to the respective `civ-`... modules."]},"civ1-city-improvement":{"status":"updated","log":["Update method of processing `Yield`s.","Add requirements for a `Factory` to be built before a `PowerPlant` can be built.","Ensure only one type of `PowerPlant` can exist within a `City`.","Add missing `Yield` and `YieldModifier` `Rule`s."]},"civ1-city":{"status":"updated","log":["Fix bug where `Unit`s weren't destroyed when their supporting `City` was destroyed.","Rework `ProcessYield` `Rule`s to utilise new ...`Support` `Yield`s.","Remove `Rule` that empties the `FoodStorage` on shrink.","Add `Unit` `Defeated` `Rule` to handle a `City` being destroyed instead of captured.","Use updated `Yield` `Rule`s.","Slight tweak to how `Yield`s are weighted.","Update handling not adding `Production` when `City` is in `CivilDisorder`."]},"civ1-goody-hut":{"status":"updated","log":["Updates to `Yield` weights."]},"civ1-player":{"status":"updated","log":["Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights."]},"civ1-science":{"status":"updated","log":["Fix a bug where if there are no `Advance`s available to research (or fewer than the number of granted `Advance`s will be) it'll grant as many are available.","Update handling not adding `Research` when `City` is in `CivilDisorder`."]},"civ1-trade-rate":{"status":"updated","log":["Simplify `Yield` `Rule`s."]},"civ1-treasury":{"status":"updated","log":["Use updated `Yield` mechanism.","Update handling not adding `Gold` when `City` is in `CivilDisorder`."]},"civ1-unit":{"status":"updated","log":["Fix bug where units could retry a failed move over and over.","Made it more likely that your `Move` would succeed (>50% of `Move`s means it'll work - in-line with Civ)."]},"civ1-world":{"status":"updated","log":["Update `Yield` mechanism.","Fix a few `Tile` `Yield`s."]},"core-city-happiness":{"status":"updated","log":[]},"core-city":{"status":"updated","log":["Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided."]},"core-player-world":{"status":"updated","log":["Updates to `Yield` mechanism."]},"core-world":{"status":"updated","log":["Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s."]},"core-yield":{"status":"updated","log":["Add `reduceYields` utility function."]}}}
,
{"version":"0.1.0@1e05c11","date":"2022-03-23T22:18:44.000Z","localChanges":["Updates to utilise `PlayerTile`s.","Update styling for `AdjutstTradeRates` and `Revolution` `PlayerAction`s.","Fix `Actions` `keydown` event to allow selecting events with arrow keys.","Add `Unit` `Busy` indicators."],"externalChanges":{"base-city-improvement-aqueduct":{"status":"added","log":["Initial commit"]},"base-city-improvement-bank":{"status":"added","log":["Initial commit."]},"base-city-improvement-barracks":{"status":"added","log":["Initial commit"]},"base-city-improvement-cathedral":{"status":"added","log":["Initial commit."]},"base-city-improvement-citywalls":{"status":"added","log":["Initial commit"]},"base-city-improvement-colosseum":{"status":"added","log":["Initial commit"]},"base-city-improvement-courthouse":{"status":"added","log":["Initial commit"]},"base-city-improvement-factory":{"status":"added","log":["Initial commit."]},"base-city-improvement-granary":{"status":"added","log":["Initial commit"]},"base-city-improvement-hydroplant":{"status":"added","log":["Initial commit."]},"base-city-improvement-library":{"status":"added","log":["Initial commit"]},"base-city-improvement-manufacturingplant":{"status":"added","log":["Initial commit."]},"base-city-improvement-marketplace":{"status":"added","log":["Initial commit"]},"base-city-improvement-masstransit":{"status":"added","log":["Initial commit."]},"base-city-improvement-nuclearplant":{"status":"added","log":["Initial commit."]},"base-city-improvement-palace":{"status":"added","log":["Initial commit"]},"base-city-improvement-powerplant":{"status":"added","log":["Initial commit."]},"base-city-improvement-recyclingcenter":{"status":"added","log":["Initial commit."]},"base-city-improvement-sdidefence":{"status":"added","log":["Initial commit."]},"base-city-improvement-temple":{"status":"added","log":["Initial commit"]},"base-city-improvement-university":{"status":"added","log":["Initial commit."]},"base-city-yield-gold":{"status":"added","log":["Initial commit"]},"base-city-yield-happiness":{"status":"added","log":["Initial commit"]},"base-city-yield-luxuries":{"status":"added","log":["Initial commit"]},"base-city-yield-research":{"status":"added","log":["Initial commit"]},"base-city-yield-unhappiness":{"status":"added","log":["Initial commit","Fix package name and repo URL.","Actually fix package name and repo URL..."]},"base-civilization-american":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-aztec":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-babylonian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-chinese":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-egyptian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-english":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-french":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-german":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-greek":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-indian":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-mongol":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-roman":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-russian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-zulu":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-diplomacy-declaration-peace":{"status":"added","log":["Initial commit"]},"base-diplomacy-declaration-war":{"status":"added","log":["Initial commit"]},"base-diplomacy-interaction-contact":{"status":"added","log":["Initial commit"]},"base-goody-hut-advance":{"status":"added","log":["Initial commit"]},"base-goody-hut-city":{"status":"added","log":["Initial commit"]},"base-goody-hut-gold":{"status":"added","log":["Initial commit"]},"base-goody-hut-unit":{"status":"added","log":["Initial commit","Use consistent references to github repos","Bump dependencies after changing naming convention to be consistent","Add `Unit` `Rule` for determining which `Unit` is provided","Remove redundant dependency.","Update naming for imports from `core-goody-hut`.","Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-government-anarchy":{"status":"added","log":["Initial commit"]},"base-government-communism":{"status":"added","log":["Initial commit"]},"base-government-democracy":{"status":"added","log":["Initial commit"]},"base-government-despotism":{"status":"added","log":["Initial commit"]},"base-government-monarchy":{"status":"added","log":["Initial commit"]},"base-government-republic":{"status":"added","log":["Initial commit"]},"base-leader-trait-aggression":{"status":"added","log":["Initial commit"]},"base-leader-trait-development":{"status":"added","log":["Initial commit"]},"base-leader-trait-militarism":{"status":"added","log":["Initial commit"]},"base-player-action-active-unit":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-adjust-trade-rates":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-end-turn":{"status":"added","log":["Initial commit"]},"base-player-action-inactive-unit":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-revolution":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-science-advance-advancedflight":{"status":"added","log":["Initial commit."]},"base-science-advance-alphabet":{"status":"added","log":["Initial commit"]},"base-science-advance-astronomy":{"status":"added","log":["Initial commit"]},"base-science-advance-atomictheory":{"status":"added","log":["Initial commit."]},"base-science-advance-automobile":{"status":"added","log":["Initial commit."]},"base-science-advance-banking":{"status":"added","log":["Initial commit."]},"base-science-advance-bridgebuilding":{"status":"added","log":["Initial commit"]},"base-science-advance-bronzeworking":{"status":"added","log":["Initial commit"]},"base-science-advance-ceremonialburial":{"status":"added","log":["Initial commit"]},"base-science-advance-chemistry":{"status":"added","log":["Initial commit."]},"base-science-advance-chivalry":{"status":"added","log":["Initial commit"]},"base-science-advance-codeoflaws":{"status":"added","log":["Initial commit"]},"base-science-advance-combustion":{"status":"added","log":["Initial commit."]},"base-science-advance-communism":{"status":"added","log":["Initial commit."]},"base-science-advance-computers":{"status":"added","log":["Initial commit."]},"base-science-advance-conscription":{"status":"added","log":["Initial commit."]},"base-science-advance-construction":{"status":"added","log":["Initial commit"]},"base-science-advance-corporation":{"status":"added","log":["Initial commit."]},"base-science-advance-currency":{"status":"added","log":["Initial commit"]},"base-science-advance-democracy":{"status":"added","log":["Initial commit."]},"base-science-advance-electricity":{"status":"added","log":["Initial commit."]},"base-science-advance-electronics":{"status":"added","log":["Initial commit."]},"base-science-advance-engineering":{"status":"added","log":["Initial commit"]},"base-science-advance-explosives":{"status":"added","log":["Initial commit."]},"base-science-advance-feudalism":{"status":"added","log":["Initial commit"]},"base-science-advance-flight":{"status":"added","log":["Initial commit."]},"base-science-advance-fusionpower":{"status":"added","log":["Initial commit."]},"base-science-advance-geneticengineering":{"status":"added","log":["Initial commit."]},"base-science-advance-gunpowder":{"status":"added","log":["Initial commit","Repo cleansing."]},"base-science-advance-horsebackriding":{"status":"added","log":["Initial commit"]},"base-science-advance-industrialization":{"status":"added","log":["Initial commit."]},"base-science-advance-invention":{"status":"added","log":["Initial commit"]},"base-science-advance-ironworking":{"status":"added","log":["Initial commit"]},"base-science-advance-laborunion":{"status":"added","log":["Initial commit."]},"base-science-advance-literacy":{"status":"added","log":["Initial commit"]},"base-science-advance-magnetism":{"status":"added","log":["Initial commit."]},"base-science-advance-mapmaking":{"status":"added","log":["Initial commit"]},"base-science-advance-masonry":{"status":"added","log":["Initial commit"]},"base-science-advance-massproduction":{"status":"added","log":["Initial commit."]},"base-science-advance-mathematics":{"status":"added","log":["Initial commit"]},"base-science-advance-medicine":{"status":"added","log":["Initial commit."]},"base-science-advance-metallurgy":{"status":"added","log":["Initial commit."]},"base-science-advance-monarchy":{"status":"added","log":["Initial commit"]},"base-science-advance-mysticism":{"status":"added","log":["Initial commit"]},"base-science-advance-navigation":{"status":"added","log":["Initial commit"]},"base-science-advance-nuclearfission":{"status":"added","log":["Initial commit."]},"base-science-advance-nuclearpower":{"status":"added","log":["Initial commit."]},"base-science-advance-philosophy":{"status":"added","log":["Initial commit."]},"base-science-advance-physics":{"status":"added","log":["Initial commit."]},"base-science-advance-plastics":{"status":"added","log":["Initial commit."]},"base-science-advance-pottery":{"status":"added","log":["Initial commit"]},"base-science-advance-railroad":{"status":"added","log":["Initial commit."]},"base-science-advance-recycling":{"status":"added","log":["Initial commit."]},"base-science-advance-refining":{"status":"added","log":["Initial commit."]},"base-science-advance-religion":{"status":"added","log":["Initial commit."]},"base-science-advance-robotics":{"status":"added","log":["Initial commit."]},"base-science-advance-rocketry":{"status":"added","log":["Initial commit."]},"base-science-advance-spaceflight":{"status":"added","log":["Initial commit."]},"base-science-advance-steamengine":{"status":"added","log":["Initial commit."]},"base-science-advance-steel":{"status":"added","log":["Initial commit."]},"base-science-advance-superconductor":{"status":"added","log":["Initial commit."]},"base-science-advance-theoryofgravity":{"status":"added","log":["Initial commit."]},"base-science-advance-therepublic":{"status":"added","log":["Initial commit"]},"base-science-advance-thewheel":{"status":"added","log":["Initial commit"]},"base-science-advance-trade":{"status":"added","log":["Initial commit."]},"base-science-advance-university":{"status":"added","log":["Initial commit."]},"base-science-advance-writing":{"status":"added","log":["Initial commit"]},"base-terrain-arctic":{"status":"added","log":["Initial commit"]},"base-terrain-desert":{"status":"added","log":["Initial commit"]},"base-terrain-feature-coal":{"status":"added","log":["Initial commit"]},"base-terrain-feature-fish":{"status":"added","log":["Initial commit"]},"base-terrain-feature-game":{"status":"added","log":["Initial commit"]},"base-terrain-feature-gems":{"status":"added","log":["Initial commit"]},"base-terrain-feature-gold":{"status":"added","log":["Initial commit"]},"base-terrain-feature-horse":{"status":"added","log":["Initial commit"]},"base-terrain-feature-oasis":{"status":"added","log":["Initial commit"]},"base-terrain-feature-oil":{"status":"added","log":["Initial commit"]},"base-terrain-feature-seal":{"status":"added","log":["Initial commit"]},"base-terrain-feature-shield":{"status":"added","log":["Initial commit"]},"base-terrain-forest":{"status":"added","log":["Initial commit"]},"base-terrain-grassland":{"status":"added","log":["Initial commit"]},"base-terrain-hills":{"status":"added","log":["Initial commit"]},"base-terrain-jungle":{"status":"added","log":["Initial commit"]},"base-terrain-mountains":{"status":"added","log":["Initial commit"]},"base-terrain-ocean":{"status":"added","log":["Initial commit"]},"base-terrain-plains":{"status":"added","log":["Initial commit"]},"base-terrain-river":{"status":"added","log":["Initial commit"]},"base-terrain-swamp":{"status":"added","log":["Initial commit"]},"base-terrain-tundra":{"status":"added","log":["Initial commit"]},"base-terrain-yield-food":{"status":"added","log":["Initial commit"]},"base-terrain-yield-production":{"status":"added","log":["Initial commit"]},"base-terrain-yield-trade":{"status":"added","log":["Initial commit"]},"base-tile-improvement-irrigation":{"status":"added","log":["Initial commit"]},"base-tile-improvement-mine":{"status":"added","log":["Initial commit"]},"base-tile-improvement-pollution":{"status":"added","log":["Initial commit"]},"base-tile-improvement-railroad":{"status":"added","log":["Initial commit"]},"base-tile-improvement-road":{"status":"added","log":["Initial commit"]},"base-trade-rate-luxuries":{"status":"added","log":["Initial commit"]},"base-trade-rate-research":{"status":"added","log":["Initial commit"]},"base-trade-rate-tax":{"status":"added","log":["Initial commit"]},"base-unit-action-attack":{"status":"added","log":["Initial commit","Reduce `Attack` when `moves` is < 1.","Reduce `moves` when attacking.","Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-railroad":{"status":"added","log":["Initial commit.","Add custom `Busy` `Rule`.","Somehow broke 0.1.1 (and now deleted 0.1.0 too, oops!).","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-capture-city":{"status":"added","log":["Initial commit","Rework constructor to accept the target `City`."]},"base-unit-action-clear-forest":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-disembark":{"status":"added","log":["Initial commit","Rework constructor to accept the target `ITransport`."]},"base-unit-action-embark":{"status":"added","log":["Initial commit","Update `Move` dependency","Rework constructor to accept the target `ITransport`.","Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{"status":"added","log":["Initial commit","Add `UnitImprovementRegistry` via constructor and use updated `DelayedAction` constructor.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{"status":"added","log":["Initial commit","Ensure `CityNameRegistry` is used for `City` names.","Ensure local `RuleRegistry` is passed on to `City` constructor.","Repo cleansing."]},"base-unit-action-move":{"status":"added","log":["Initial commit","Extract `movementCost` and `validate` functions into members.","Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-no-orders":{"status":"added","log":["Initial commit"]},"base-unit-action-pillage":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-sleep":{"status":"added","log":["Initial commit","Update to latest `DelayedAction` version and add wake condition to `Busy`","Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing.","Add labelled `Busy` `Rule` (`Sleeping`) to indicate the action being performed.","Repo cleansing."]},"base-unit-action-unload":{"status":"added","log":["Initial commit","Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"base-unit-artillery":{"status":"added","log":["Initial commit."]},"base-unit-battleship":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-bomber":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-cannon":{"status":"added","log":["Initial commit."]},"base-unit-caravan":{"status":"added","log":["Initial commit."]},"base-unit-carrier":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-catapult":{"status":"added","log":["Initial commit"]},"base-unit-chariot":{"status":"added","log":["Initial commit"]},"base-unit-cruiser":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-diplomat":{"status":"added","log":["Initial commit."]},"base-unit-fighter":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-frigate":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-horseman":{"status":"added","log":["Initial commit"]},"base-unit-improvement-fortified":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-improvement-veteran":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-ironclad":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-knight":{"status":"added","log":["Initial commit"]},"base-unit-mechanizedinfanty":{"status":"added","log":["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-mechanizedinfantry":{"status":"added","log":["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-musketman":{"status":"added","log":["Initial commit","Repo cleansing."]},"base-unit-nuclear":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-rifleman":{"status":"added","log":["Initial commit."]},"base-unit-sail":{"status":"added","log":["Initial commit"]},"base-unit-settlers":{"status":"added","log":["Initial commit"]},"base-unit-spearman":{"status":"added","log":["Initial commit"]},"base-unit-submarine":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-swordman":{"status":"added","log":["Initial commit"]},"base-unit-tank":{"status":"added","log":["Initial commit."]},"base-unit-transport":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-trireme":{"status":"added","log":["Initial commit"]},"base-unit-type-air":{"status":"added","log":["Initial commit."]},"base-unit-type-fortifiable":{"status":"added","log":["Initial commit"]},"base-unit-type-land":{"status":"added","log":["Initial commit"]},"base-unit-type-naval-transport":{"status":"added","log":["Initial commit","Ensure type safety when using `this` to refer to `ITransport`.","Update to use latest `core-unit-transport` changes."]},"base-unit-type-naval":{"status":"added","log":["Initial commit"]},"base-unit-type-worker":{"status":"added","log":["Initial commit"]},"base-unit-warrior":{"status":"added","log":["Initial commit"]},"base-wonder-apolloprogram":{"status":"added","log":["Initial commit."]},"base-wonder-colossus":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-copernicus-observatory":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-cureforcancer":{"status":"added","log":["Initial commit."]},"base-wonder-darwinsvoyage":{"status":"added","log":["Initial commit."]},"base-wonder-great-library":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-wall":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hanging-gardens":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hooverdam":{"status":"added","log":["Initial commit."]},"base-wonder-isaacnewtonscollege":{"status":"added","log":["Initial commit."]},"base-wonder-jsbachscathedral":{"status":"added","log":["Initial commit."]},"base-wonder-lighthouse":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-magellans-expedition":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-manhattanproject":{"status":"added","log":["Initial commit."]},"base-wonder-michelangeloschapel":{"status":"added","log":["Initial commit."]},"base-wonder-oracle":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-pyramids":{"status":"added","log":["Initial commit"]},"base-wonder-setiprogram":{"status":"added","log":["Initial commit."]},"base-wonder-shakespearestheatre":{"status":"added","log":["Initial commit."]},"base-wonder-unitednations":{"status":"added","log":["Initial commit."]},"base-wonder-womenssuffrage":{"status":"added","log":["Initial commit."]},"civ1-city-happiness":{"status":"updated","log":["Add effect for `Cololsseum` and `Cathedral`.","Add military wariness to `Republic` and `Democracy` governments.","Fix values for `Colosseum` and `Cathedral`.","Attempt to fix perpetual `CivilDisorder` and `Production` causing `Unit`s to become unsupported.","Fixed bug where `CivilDisorder` effects were active any time there was any `Unhappiness`."]},"civ1-city-improvement":{"status":"updated","log":["Add missing `CityImprovement`s.","Update to use new `CityBuild` mechanism.","Fix tests.","Add `Yield` modifiers for `Factory` etc."]},"civ1-city":{"status":"updated","log":["Update `Captured` event to include both previous owner and capturing player.","Move `Captured` event to `Player` to handle `player:defeated` events.","Updates to allow setting `YieldRegistry` in `setUpCity`."]},"civ1-government":{"status":"updated","log":["Utilise `AvailableGovernmentsRegistry` and separate `Revolution` `PlayerAction` (although TODO, change that to the request and a random delay for the `ChooseGovernment` `MandatoryAction`).","Update `GovernmentChanged` `Rule` to be compatible with `PlayerTile`s."]},"civ1-player":{"status":"updated","log":["Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events."]},"civ1-science":{"status":"updated","log":["Updates to randomly start with some `Advance`s.","Acquire `Advance`s when capturing an advance enemey `City`."]},"civ1-trade-rate":{"status":"updated","log":["Add `AdjustTradeRates` `PlayerAction`."]},"civ1-unit":{"status":"updated","log":["Correct misspelled `MechanizedInfantry`.","Update to use new `CityBuild` mechanism.","Fix tests","Add `BuildRailroad`.","Fix movement costs."]},"civ1-wonder":{"status":"updated","log":["Add missing `Wonder`s.","Utilise new `CityBuild` mechanism for registering.","Fix missing cost for `DarwinsVoyage`.","Add effects for `MichelangelosChapel` and `WomensSuffrage`.","Add `Obsoletion` `Rule` to notify `Wonder` owners for obsolesence.","Move `Yield` `Rule`s to `Cost` `Rule`s to enable accurate processing."]},"civ1-world":{"status":"updated","log":["Updating world generator values to generate maps closer to those from the original Civilization. More work still to do here.","Fix bug with incorrect `Yield`s for `Plains` with `Horse`.","Enable `Railroad` construction.","Fix bug where `Irrigation` and `Mine` could both exist on the same `Tile`.","Add `Railroad` `Yield` modifier.","Add updated `Tile` yields for other governments."]},"core-ai-client":{"status":"added","log":["Initial commit","Add missing `instance` to `AIClientRegistry` and allow `LeaderRegistry` instance to be passed in.","Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s.","Add `City` to exported fields from `DataObject#toPlainObject`.","Add `ChangeProduction` `PlayerAction` when a `City` is already building something.","Fix path reference from relative to \"absolute\" via `@civ-clone`.","Update `CityBuild#available` mechanism to show resource costs for items.","Add `Buildable` class that `Unit`s and `CityImprovement`s inherit from.","Change logic to pave the way for alternative costs associated to `Buildable` items.","Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s.","Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-growth":{"status":"added","log":["Initial commit","Fix missing `CityGrowth` `AdditionalData` from `City`s.","Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies.","Repo cleansing."]},"core-city-happiness":{"status":"added","log":["Initial commit","Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{"status":"added","log":["Initial commit","Make `CityImprovement`s extend `DataObject`.","Update to use new `Buildable` class from core-city-build.","Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead.","Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{"status":"added","log":["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-civ-client":{"status":"added","log":["Initial commit"]},"core-civilization":{"status":"added","log":["Initial commit","Update `Leader`s to be `DataObject`s.","Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-client":{"status":"added","log":["Initial commit"]},"core-data-object":{"status":"added","log":["Initial commit","Add `id` to `DataObject`s to allow easy referencing from within `Client`s.","Allow `AdditionalData` to be applied to child classes.","Change `DataObject`s to allow recursive data to be stored.","Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages.","Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)","Perform `filter`ing on all objects, rather than only `DataObject`s. This also means we can return something other than a `DataObject`.","Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage.","Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing.","Make `IDataObject` interface more flexible."]},"core-diplomacy":{"status":"added","log":["Initial commit"]},"core-engine":{"status":"added","log":["Initial commit","Add `@types/glob` as a direct dependency for dependent packages.","Prevent `Start` `Rule`s from being processed directly. Might rever this later...","Remove reliance on `node` so that a browser can be used instead."]},"core-game-year":{"status":"added","log":["Initial commit","Make `Year` extend `DataObject`.","Simpliy `Rule`s."]},"core-goody-hut":{"status":"added","log":["Initial commit","Add `Distribution` `Rule` for controlling placement of huts within `World`s.","Correct arguments for `Distribution` `Rule`.","Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s.","Simpliy `Rule`s."]},"core-government":{"status":"added","log":["Initial commit","Provide `available` `Government`s with the `PlayerGovernment` instance.","Remove `Revolution`. Move to its own package.","Need to call `super(Government)` in `ConstructorRegistry` constructor.","Simpliy `Rule`s."]},"core-player-world":{"status":"added","log":["Initial commit","Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets","Bump `core-world` version","Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered.","Refactor `PlayerWorld` to store `PlayerTile`s to allow the world changes to be hidden from players (like in the original game).","Updates to `Yield` mechanism.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{"status":"added","log":["Initial commit","Add `HiddenPlayerAction` and rename `PlayerAction`-related methods.","Update returned `DataObject` data.","Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename.","Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-registry":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{"status":"added","log":["Initial commit","Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`.","Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`.","Simpliy `Rule`s."]},"core-terrain-feature":{"status":"added","log":["Initial commit","Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{"status":"added","log":["Initial commit","Remove unused `Rule`s.","Simpliy `Rule`s."]},"core-tile-improvement":{"status":"added","log":["Initial commit","Ensure `TileImprovement`s extend `DataObject`.","Simpliy `Rule`s."]},"core-trade-rate":{"status":"added","log":["Initial commit","Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`.","Add convenience method `PlayerTradeRates#setAll` to offload the `balance` functionality to the frontend.","Repo cleansing."]},"core-treasury":{"status":"added","log":["Initial commit","Add `terasury` `AdditionalData` to `Player`s.","Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{"status":"added","log":["Initial commit","Add `engine:start` event handler.","Add missing events to trigger `Rule`s.","Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`.","Ensure return types match for TypeScript compiler."]},"core-unit-improvement":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Ensure `UnitImprovement`s are `DataObject`s."]},"core-unit-transport":{"status":"added","log":["Initial commit","Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies.","Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{"status":"added","log":["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"core-wonder":{"status":"added","log":["Initial commit","Add missing `instance` to `WonderRegistry`","Add `getByCity` method to `WonderRegistry`","Add event to trigger when `Wonder`s are obsoleted.","Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world-generator":{"status":"added","log":["Initial commit","Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere.","Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"core-world-path":{"status":"added","log":["Initial commit"]},"core-world":{"status":"added","log":["Initial commit","Ensure `undefined` is never added to a `Yield`.","Fix caching issue when `Yield`s get modified after caching.","Fix a bug when `Tile` `Yield`s exist for which weights are not provided.","Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`.","Ensure `World#build` handles async `Generator#generate`.","Have `World#build` return `Promise<World>` to help with tests in other packages.","Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{"status":"added","log":["Initial commit","Ensure `YieldValue` extends `DataObject`.","Remove `YieldValue` value object, the high usage combined with `ulid` from `DataObject` was causing slowdowns and didn't need to be a `DataObject` at all.","Add `reduceYields` utility function.","Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{"status":"updated","log":["Add methods for catching when `City`s or `Unit`s are captured or defeated.","Fix the test suite.","Fix `SimpleAIClient` to use the new `CityBuild` mechanism.","Updates to utilise updated `PlayerWorld`."]},"simple-world-generator":{"status":"updated","log":["Changes to world generation to be closer to the original Civilization.","Fix `simpleRLELoader` to be async."]}}}
,
{"version":"0.1.0@8347999","date":"2022-03-20T21:08:10.000Z","localChanges":["Add new cheat (`ModifyUnit`).","Fix `unit:defeated` event.","Add listeners for `city:grow` and `city:shrink`.","Fix `player:defeated` listener.","Allow activating other `ActiveUnit`s.","Refactor city builds to use new `BuildItem` mechanism.","Add basics of `Revolution` handling (WIP).","Add basics of trade rate adjustment (WIP).","Add `Railroad` to be rendered.","Oprhan data cleanup fix attempt - no change."],"externalChanges":{}}
,
{"version":"0.1.0@be27348","date":"2022-03-13T21:52:17.000Z","localChanges":["Major update collection","","Fix number of players selector.","Allow activating `InactiveUnit`s.","More `DataTransfer` optimisations.","Refactor `Portal` im preparation for making the map area self-contained.","Add `View city` and `Show on map` to `CityBuild` `PlayerAction`s.","Add `ConfirmationWindow`.","Fix map rendering bug on wraps."],"externalChanges":{}}
,
{"version":"0.1.0@cb8e514","date":"2022-03-06T20:32:00.000Z","localChanges":["Allow selecting player `Civilization` and `Leader` (if there is more than one available)"],"externalChanges":{"base-science-advance-advancedflight":{"status":"added","log":["Initial commit."]},"base-science-advance-atomictheory":{"status":"added","log":["Initial commit."]},"base-science-advance-automobile":{"status":"added","log":["Initial commit."]},"base-science-advance-banking":{"status":"added","log":["Initial commit."]},"base-science-advance-chemistry":{"status":"added","log":["Initial commit."]},"base-science-advance-combustion":{"status":"added","log":["Initial commit."]},"base-science-advance-communism":{"status":"added","log":["Initial commit."]},"base-science-advance-computers":{"status":"added","log":["Initial commit."]},"base-science-advance-conscription":{"status":"added","log":["Initial commit."]},"base-science-advance-corporation":{"status":"added","log":["Initial commit."]},"base-science-advance-democracy":{"status":"added","log":["Initial commit."]},"base-science-advance-electricity":{"status":"added","log":["Initial commit."]},"base-science-advance-electronics":{"status":"added","log":["Initial commit."]},"base-science-advance-explosives":{"status":"added","log":["Initial commit."]},"base-science-advance-flight":{"status":"added","log":["Initial commit."]},"base-science-advance-fusionpower":{"status":"added","log":["Initial commit."]},"base-science-advance-geneticengineering":{"status":"added","log":["Initial commit."]},"base-science-advance-industrialization":{"status":"added","log":["Initial commit."]},"base-science-advance-laborunion":{"status":"added","log":["Initial commit."]},"base-science-advance-magnetism":{"status":"added","log":["Initial commit."]},"base-science-advance-massproduction":{"status":"added","log":["Initial commit."]},"base-science-advance-medicine":{"status":"added","log":["Initial commit."]},"base-science-advance-metallurgy":{"status":"added","log":["Initial commit."]},"base-science-advance-nuclearfission":{"status":"added","log":["Initial commit."]},"base-science-advance-nuclearpower":{"status":"added","log":["Initial commit."]},"base-science-advance-philosophy":{"status":"added","log":["Initial commit."]},"base-science-advance-physics":{"status":"added","log":["Initial commit."]},"base-science-advance-plastics":{"status":"added","log":["Initial commit."]},"base-science-advance-railroad":{"status":"added","log":["Initial commit."]},"base-science-advance-recycling":{"status":"added","log":["Initial commit."]},"base-science-advance-refining":{"status":"added","log":["Initial commit."]},"base-science-advance-religion":{"status":"added","log":["Initial commit."]},"base-science-advance-robotics":{"status":"added","log":["Initial commit."]},"base-science-advance-rocketry":{"status":"added","log":["Initial commit."]},"base-science-advance-spaceflight":{"status":"added","log":["Initial commit."]},"base-science-advance-steamengine":{"status":"added","log":["Initial commit."]},"base-science-advance-steel":{"status":"added","log":["Initial commit."]},"base-science-advance-superconductor":{"status":"added","log":["Initial commit."]},"base-science-advance-theoryofgravity":{"status":"added","log":["Initial commit."]},"base-science-advance-trade":{"status":"added","log":["Initial commit."]},"base-science-advance-university":{"status":"added","log":["Initial commit."]},"base-unit-artillery":{"status":"added","log":["Initial commit."]},"base-unit-battleship":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-bomber":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-cannon":{"status":"added","log":["Initial commit."]},"base-unit-caravan":{"status":"added","log":["Initial commit."]},"base-unit-carrier":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-cruiser":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-diplomat":{"status":"added","log":["Initial commit."]},"base-unit-fighter":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-frigate":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-ironclad":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-mechanizedinfanty":{"status":"added","log":["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-nuclear":{"status":"added","log":["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-rifleman":{"status":"added","log":["Initial commit."]},"base-unit-submarine":{"status":"added","log":["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-tank":{"status":"added","log":["Initial commit."]},"base-unit-transport":{"status":"added","log":["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-type-air":{"status":"added","log":["Initial commit."]},"civ1-city":{"status":"updated","log":["Update `Capturing` `Rule` to include `capturingPlayer` as well as the previously owning `Player`.","Add `reassignWorkers` function to be called via UI."]},"civ1-goody-hut":{"status":"updated","log":["Fix `FreeCity` behaviour."]},"civ1-player":{"status":"updated","log":["Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s."]},"civ1-science":{"status":"updated","log":["Add remaining missing `Advance`s.","Fix incorrect prerequisites for `Railroad`."]},"civ1-treasury":{"status":"updated","log":["Add `CompleteProduction` action."]},"civ1-unit":{"status":"updated","log":["Add in missing `Unit`s.","Add missing `Unit`s.","Fix `ClearX` and `PlantForest` actions and give `Ocean` `MovementCost` back to enable `Embark` again."]},"core-city":{"status":"added","log":["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-rule":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-unit":{"status":"added","log":["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"simple-ai-client":{"status":"updated","log":["Updates to prevent TypeScript being sad about the `catch (e)`, `reject(e)` flow.","Add `EndTurn` support."]}}}
,
{"version":"0.1.0@e6518a8","date":"2022-03-04T22:23:45.000Z","localChanges":["Add `DataObserver` to track `gamedatapatch`s and act when key components are updated.","Add number of players menu when starting up.","Use `GlobalEventHandlersEventMap` to map expected `Event` types.","Improve efficiencies in `World.get` using caching.","Fix bug in `SelectionWindow`.","Add `autoDisplay` option to `Window`."],"externalChanges":{}}
,
{"version":"0.1.0@bc6a38f","date":"2022-03-01T07:21:32.000Z","localChanges":["Add cheats (`GrantAdvance` and `GrantGold`) and `CompleteProduction` action.","Make `Actions` component long-lived, instead of a new instance each time an action is performed.","Update `City` component on relevant patch data."],"externalChanges":{}}
,
{"version":"0.1.0@0b4762d","date":"2022-02-27T22:04:31.000Z","localChanges":["Break `Terrain` `Map` into components.","Handle `EndTurn` `PlayerAction`.","Handle patch driven data transfer (major speedup!).","Add `Minimap` component.","Keep only 1 notification window open at a time.","Selectively update `Map` `Tile`s to speed up renderer."],"externalChanges":{}}
,
{"version":"0.1.0@6fd2e87","date":"2022-02-21T21:37:07.000Z","localChanges":["Relatively major refactor:","- Add `Window` class and more keyboard shortcuts.","- Updates to `Actions` so that the current highlight is more visible and can be keyboard controlled.","- Allow minimap to be clickable.","- Hide other player details by default.","- Speed improvements for comms (still needs to be improved...)","- Probably more..."],"externalChanges":{"core-data-object":{"status":"updated","log":["Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)"]}}}
,
{"version":"0.1.0@3f94a15","date":"2021-03-10T20:25:38.000Z","localChanges":["Fix `Unit` and `ActiveUnit` `Map`s to work with assets generated by `civ1-asset-extractor`.","Fix `Quit` menu item.","More investigation into incremental data updates - this needs a comprehensive strategy and should also cover enemy `Player`, `Unit` and `City`s with restricted information (a stack of enemy `Unit`s should only show the likely defender etc.)"],"externalChanges":{}}
,
{"version":"0.1.0@288b2bc","date":"2021-03-08T21:29:54.000Z","localChanges":["Allow closing `NotificationWindow`s with `Escape` and prevent keys from bubbling and affecting the game.","First stab at incremental data updates - all commented out for now...","Sort `activeUnit` by if it was the last one moved, this should help the gameplay feel more like classic Civ."],"externalChanges":{"base-civilization-american":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-aztec":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-babylonian":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-chinese":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-egyptian":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-english":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-french":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-german":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-greek":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-indian":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-mongol":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-roman":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-russian":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-civilization-zulu":{"status":"updated","log":["Update colours used in `Attribute`s."]},"base-goody-hut-unit":{"status":"updated","log":["Remove redundant dependency.","Update naming for imports from `core-goody-hut`."]},"base-unit-action-attack":{"status":"updated","log":[]},"base-unit-action-unload":{"status":"updated","log":["Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"civ1-city":{"status":"updated","log":["Update `tests/lib/setUpCity` to work with updated `World`.","Fix weighting for `City#tilesWorked`.","Add `ChangeProduction` `Rule`."]},"civ1-goody-hut":{"status":"updated","log":["Add `index.ts` so that `Rule`s are registered and processed.","Fix method calls and expected returns.","Add missing dependency.","Add missing `Rule`s."]},"civ1-player":{"status":"updated","log":["Add `VisibilityChanged` `Rule`s."]},"civ1-unit":{"status":"updated","log":["Add `Defeated` implementation to destroy `Unit`s."]},"civ1-wonder":{"status":"updated","log":["Update to work with new `setUpCity` form."]},"civ1-world":{"status":"updated","log":["Add `Event`s when `TileImprovement`s are `Built` or `Pillaged`.","Update `Engine` `Start` `Rule`s to meet changes to `simple-world-generator`."]},"core-city-build":{"status":"updated","log":["Add `ChangeProduction` `PlayerAction` when a `City` is already building something.","Fix path reference from relative to \"absolute\" via `@civ-clone`."]},"core-player-world":{"status":"updated","log":["Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered."]},"core-world":{"status":"updated","log":["Have `World#build` return `Promise<World>` to help with tests in other packages."]},"core-yield":{"status":"updated","log":["Ensure `YieldValue` extends `DataObject`."]},"simple-ai-client":{"status":"updated","log":["Prevent infinite loop and output debug info."]}}}
,
{"version":"0.1.0@f0b649b","date":"2021-03-05T23:32:19.000Z","localChanges":["Update `README.md`."],"externalChanges":{}}
,
{"version":"0.1.0@4fe8fd4","date":"2021-03-04T22:29:57.000Z","localChanges":["Break CSS into SCSS files.","Add a main menu with a background image.","Update maps to add `clear` method to empty.","Fix coast graphics.","Update `City` view to properly show map and worked tiles.","Add `Unload` support for `Transport`s."],"externalChanges":{"base-player-action-end-turn":{"status":"added","log":["Initial commit"]},"civ1-player":{"status":"updated","log":["Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread."]},"core-data-object":{"status":"updated","log":["Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages."]},"core-tile-improvement":{"status":"updated","log":["Ensure `TileImprovement`s extend `DataObject`."]},"core-world-generator":{"status":"updated","log":["Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere."]},"core-world":{"status":"updated","log":["Ensure `World#build` handles async `Generator#generate`."]},"simple-world-generator":{"status":"updated","log":["Update `BaseGenerator` to use updated `Generator` interface and utilise `Promise`s for `#generate`."]}}}
,
{"version":"0.1.0@f08bea1","date":"2021-02-27T20:55:42.000Z","localChanges":["Update TODOs."],"externalChanges":{}}
,
{"version":"0.1.0@5fc5bee","date":"2021-02-27T20:52:12.000Z","localChanges":["Continuing to break `renderer.ts` into components.","Add reusable `Element` and `TransientElement` which other components extend from.","Add `PlayerDetails` to show current research and treasury."],"externalChanges":{}}
,
{"version":"0.1.0@c1b8fef","date":"2021-02-25T21:32:22.000Z","localChanges":["Add map navigation by clicking on `Tile`s.","Stop notification spam on errors.","City information screen started including showing map. This shows all surrounding tiles somehow...","Fixed `EndOfTurn` bug, this now cycles through turns automatically - client-side.","Move `UnitDetails` into a component."],"externalChanges":{"core-player-world":{"status":"updated","log":["Bump `core-world` version"]}}}
,
{"version":"0.1.0@3012efb","date":"2021-02-24T22:40:18.000Z","localChanges":["Refactor notifications and add ability to handle other `MandatoryAction`s (`CityBuild` and `ChooseResearch`) which notify in a similar way to Civ 5.","Break `Map` into layers (`Terrain`, `Cities`, etc.) and allow use of a `Portal` to view layered maps through.","`City` view is next on the list.","Need to add an `EndOfTurn` `MandatoryAction`."],"externalChanges":{"civ1-city-improvement":{"status":"updated","log":["Use correct path to `Research` `Yield`."]},"civ1-player":{"status":"updated","log":["Reduce starting square calculation time."]},"civ1-wonder":{"status":"updated","log":["Add tests for `Wonder` costs."]},"core-city-build":{"status":"updated","log":["Add `City` to exported fields from `DataObject#toPlainObject`."]},"core-city":{"status":"updated","log":["Add missing fields to be exported via `DataObject#toPlainObject`."]},"core-goody-hut":{"status":"updated","log":["Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s."]},"core-world":{"status":"updated","log":["Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`."]},"simple-ai-client":{"status":"updated","log":["Updates to use updated `GoodyHutRegistry#getByTile`."]}}}
,
{"version":"0.1.0@5450acb","date":"2021-02-23T21:32:20.000Z","localChanges":["Add missing files.","Resize map view with window size.","Add sidebar.","Flash active Unit.","Fix City name and size display."],"externalChanges":{}}
,
{"version":"0.1.0@cd8c818","date":"2021-02-22T22:55:06.000Z","localChanges":["Basic renderer working. To get this showing units you need to have extracted the items from the original game data. I aim to make an extractor at some point."],"externalChanges":{"core-city":{"status":"updated","log":["Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s."]},"core-data-object":{"status":"updated","log":["Change `DataObject`s to allow recursive data to be stored."]},"core-unit":{"status":"updated","log":["Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s."]}}}
,
{"version":"0.1.0@3f031cf","date":"2021-02-19T14:06:01.000Z","localChanges":["Fixed bugs in the data that's returned and 'render' basic maps for surrounding areas of `City`s and `Unit`s. Next step is to try and integrate the old renderer..."],"externalChanges":{"base-civilization-greek":{"status":"updated","log":["Correct `Leader` name."]},"base-civilization-indian":{"status":"updated","log":["Correct `Leader` name."]},"base-civilization-roman":{"status":"updated","log":["Correct `Leader` name."]},"civ1-science":{"status":"updated","log":["Use external `Research` `Yield` to fix `PlayerResearch`."]},"civ1-treasury":{"status":"updated","log":["Ensure `Rule`s are executed by `Engine`."]},"core-data-object":{"status":"updated","log":["Allow `AdditionalData` to be applied to child classes."]},"core-science":{"status":"updated","log":["Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`."]},"core-treasury":{"status":"updated","log":["Add `terasury` `AdditionalData` to `Player`s."]},"core-unit-improvement":{"status":"updated","log":["Ensure `UnitImprovement`s are `DataObject`s."]}}}
,
{"version":"0.1.0@7f3ff48","date":"2021-02-18T17:27:54.000Z","localChanges":["Renderer \"works\" and `Action`s can be performed. Still pretty rudimentary and no graphics are rendered yet."],"externalChanges":{"base-unit-action-fortify":{"status":"updated","log":["Fix bug where `Unit`s would become active whilst still having `Fortified` applied."]},"base-unit-action-found-city":{"status":"updated","log":[]},"base-unit-action-sleep":{"status":"updated","log":["Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing."]},"civ1-city":{"status":"updated","log":["Add missing `Rule`s from `registerRules`."]},"civ1-game-year":{"status":"updated","log":["Ensure `registerRules` is called."]},"civ1-player":{"status":"updated","log":[]},"civ1-science":{"status":"updated","log":["Fix bug that prevented `ChooseResearch` `PlayerAction` from being provided.","Add missing `Rule`s."]},"civ1-unit":{"status":"updated","log":["Add `CityNameRegistry` to `action` provider for `FoundCity`."]},"civ1-wonder":{"status":"updated","log":["Add `Research` requirements for `Wonder`s."]},"civ1-world":{"status":"updated","log":["Update distribution `Rule`s to use `Rule`s defined in `core-world-generator` instead of `core-terrain`."]},"core-city-build":{"status":"updated","log":["Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s."]},"core-city-growth":{"status":"updated","log":["Fix missing `CityGrowth` `AdditionalData` from `City`s."]},"core-city-improvement":{"status":"updated","log":["Make `CityImprovement`s extend `DataObject`."]},"core-city":{"status":"updated","log":["Add `cities` `AdditionalData` to `Player`s."]},"core-civilization":{"status":"updated","log":["Update `Leader`s to be `DataObject`s."]},"core-game-year":{"status":"updated","log":["Make `Year` extend `DataObject`."]},"core-player":{"status":"updated","log":["Update returned `DataObject` data."]},"core-science":{"status":"updated","log":["Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`."]},"core-terrain":{"status":"updated","log":["Remove unused `Rule`s."]},"core-trade-rate":{"status":"updated","log":["Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`."]},"core-turn-based-game":{"status":"updated","log":["Add missing events to trigger `Rule`s."]},"core-unit":{"status":"updated","log":["Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied."]}}}
,
{"version":"0.1.0@389523c","date":"2021-02-17T10:38:23.000Z","localChanges":["Basics of the renderer working.","Data can be sent back and forth between the Main and Renderer processes."],"externalChanges":{"civ1-player":{"status":"updated","log":["Try to improve performance for scoring start tiles.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Reduce starting square calculation time.","Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread.","Add `VisibilityChanged` `Rule`s.","Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s.","Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events.","Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights.","Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`.","Refactor out `Worker`. This probably needs to be added back in at some point...","Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s.","Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-world":{"status":"updated","log":["Add `Rule`s to `registerRules`.","Prevent double triggering of `Built` `Rule`."]},"core-engine":{"status":"updated","log":["Prevent `Start` `Rule`s from being processed directly. Might rever this later..."]},"core-player-world":{"status":"updated","log":["Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets"]},"core-world":{"status":"updated","log":["Fix a bug when `Tile` `Yield`s exist for which weights are not provided."]},"simple-world-generator":{"status":"added","log":["Initial commit","Add `simpleRLELoader`","Update `BaseGenerator` to use updated `Generator` interface and utilise `Promise`s for `#generate`.","Changes to world generation to be closer to the original Civilization.","Fix `simpleRLELoader` to be async.","Ensure `TerrainFeatureRegistry` is passed in to `simpleRLELoader`.","Replace `Math.random` calls with injectable random number generator.","Remove reliance on `node` so that a browser can be used instead."]},"simple-world-path":{"status":"added","log":["Initial commit","Updates to use shard `simpleRLELoader` from `simple-world-generator`"]}}}
,
{"version":"0.1.0@6a7bbcb","date":"2021-02-16T13:56:21.000Z","localChanges":["first commit"],"externalChanges":{"base-city-improvement-aqueduct":{"status":"added","log":["Initial commit"]},"base-city-improvement-barracks":{"status":"added","log":["Initial commit"]},"base-city-improvement-citywalls":{"status":"added","log":["Initial commit"]},"base-city-improvement-colosseum":{"status":"added","log":["Initial commit"]},"base-city-improvement-courthouse":{"status":"added","log":["Initial commit"]},"base-city-improvement-granary":{"status":"added","log":["Initial commit"]},"base-city-improvement-library":{"status":"added","log":["Initial commit"]},"base-city-improvement-marketplace":{"status":"added","log":["Initial commit"]},"base-city-improvement-palace":{"status":"added","log":["Initial commit"]},"base-city-improvement-temple":{"status":"added","log":["Initial commit"]},"base-city-yield-gold":{"status":"added","log":["Initial commit"]},"base-city-yield-happiness":{"status":"added","log":["Initial commit"]},"base-city-yield-luxuries":{"status":"added","log":["Initial commit"]},"base-city-yield-research":{"status":"added","log":["Initial commit"]},"base-city-yield-unhappiness":{"status":"added","log":["Initial commit","Fix package name and repo URL.","Actually fix package name and repo URL..."]},"base-civilization-american":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-aztec":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-babylonian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-chinese":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-egyptian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-english":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-french":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-german":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-greek":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-indian":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-mongol":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-roman":{"status":"added","log":["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-russian":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-zulu":{"status":"added","log":["Initial commit","Update colours used in `Attribute`s."]},"base-diplomacy-declaration-peace":{"status":"added","log":["Initial commit"]},"base-diplomacy-declaration-war":{"status":"added","log":["Initial commit"]},"base-diplomacy-interaction-contact":{"status":"added","log":["Initial commit"]},"base-goody-hut-advance":{"status":"added","log":["Initial commit"]},"base-goody-hut-city":{"status":"added","log":["Initial commit"]},"base-goody-hut-gold":{"status":"added","log":["Initial commit"]},"base-goody-hut-unit":{"status":"added","log":["Initial commit","Use consistent references to github repos","Bump dependencies after changing naming convention to be consistent","Add `Unit` `Rule` for determining which `Unit` is provided","Remove redundant dependency.","Update naming for imports from `core-goody-hut`.","Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-government-anarchy":{"status":"added","log":["Initial commit"]},"base-government-communism":{"status":"added","log":["Initial commit"]},"base-government-democracy":{"status":"added","log":["Initial commit"]},"base-government-despotism":{"status":"added","log":["Initial commit"]},"base-government-monarchy":{"status":"added","log":["Initial commit"]},"base-government-republic":{"status":"added","log":["Initial commit"]},"base-leader-trait-aggression":{"status":"added","log":["Initial commit"]},"base-leader-trait-development":{"status":"added","log":["Initial commit"]},"base-leader-trait-militarism":{"status":"added","log":["Initial commit"]},"base-player-action-active-unit":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-inactive-unit":{"status":"added","log":["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-science-advance-alphabet":{"status":"added","log":["Initial commit"]},"base-science-advance-astronomy":{"status":"added","log":["Initial commit"]},"base-science-advance-bridgebuilding":{"status":"added","log":["Initial commit"]},"base-science-advance-bronzeworking":{"status":"added","log":["Initial commit"]},"base-science-advance-ceremonialburial":{"status":"added","log":["Initial commit"]},"base-science-advance-chivalry":{"status":"added","log":["Initial commit"]},"base-science-advance-codeoflaws":{"status":"added","log":["Initial commit"]},"base-science-advance-construction":{"status":"added","log":["Initial commit"]},"base-science-advance-currency":{"status":"added","log":["Initial commit"]},"base-science-advance-engineering":{"status":"added","log":["Initial commit"]},"base-science-advance-feudalism":{"status":"added","log":["Initial commit"]},"base-science-advance-gunpowder":{"status":"added","log":["Initial commit","Repo cleansing."]},"base-science-advance-horsebackriding":{"status":"added","log":["Initial commit"]},"base-science-advance-invention":{"status":"added","log":["Initial commit"]},"base-science-advance-ironworking":{"status":"added","log":["Initial commit"]},"base-science-advance-literacy":{"status":"added","log":["Initial commit"]},"base-science-advance-mapmaking":{"status":"added","log":["Initial commit"]},"base-science-advance-masonry":{"status":"added","log":["Initial commit"]},"base-science-advance-mathematics":{"status":"added","log":["Initial commit"]},"base-science-advance-monarchy":{"status":"added","log":["Initial commit"]},"base-science-advance-mysticism":{"status":"added","log":["Initial commit"]},"base-science-advance-navigation":{"status":"added","log":["Initial commit"]},"base-science-advance-pottery":{"status":"added","log":["Initial commit"]},"base-science-advance-therepublic":{"status":"added","log":["Initial commit"]},"base-science-advance-thewheel":{"status":"added","log":["Initial commit"]},"base-science-advance-writing":{"status":"added","log":["Initial commit"]},"base-terrain-arctic":{"status":"added","log":["Initial commit"]},"base-terrain-desert":{"status":"added","log":["Initial commit"]},"base-terrain-feature-coal":{"status":"added","log":["Initial commit"]},"base-terrain-feature-fish":{"status":"added","log":["Initial commit"]},"base-terrain-feature-game":{"status":"added","log":["Initial commit"]},"base-terrain-feature-gems":{"status":"added","log":["Initial commit"]},"base-terrain-feature-gold":{"status":"added","log":["Initial commit"]},"base-terrain-feature-horse":{"status":"added","log":["Initial commit"]},"base-terrain-feature-oasis":{"status":"added","log":["Initial commit"]},"base-terrain-feature-oil":{"status":"added","log":["Initial commit"]},"base-terrain-feature-seal":{"status":"added","log":["Initial commit"]},"base-terrain-feature-shield":{"status":"added","log":["Initial commit"]},"base-terrain-forest":{"status":"added","log":["Initial commit"]},"base-terrain-grassland":{"status":"added","log":["Initial commit"]},"base-terrain-hills":{"status":"added","log":["Initial commit"]},"base-terrain-jungle":{"status":"added","log":["Initial commit"]},"base-terrain-mountains":{"status":"added","log":["Initial commit"]},"base-terrain-ocean":{"status":"added","log":["Initial commit"]},"base-terrain-plains":{"status":"added","log":["Initial commit"]},"base-terrain-river":{"status":"added","log":["Initial commit"]},"base-terrain-swamp":{"status":"added","log":["Initial commit"]},"base-terrain-tundra":{"status":"added","log":["Initial commit"]},"base-terrain-yield-food":{"status":"added","log":["Initial commit"]},"base-terrain-yield-production":{"status":"added","log":["Initial commit"]},"base-terrain-yield-trade":{"status":"added","log":["Initial commit"]},"base-tile-improvement-irrigation":{"status":"added","log":["Initial commit"]},"base-tile-improvement-mine":{"status":"added","log":["Initial commit"]},"base-tile-improvement-pollution":{"status":"added","log":["Initial commit"]},"base-tile-improvement-railroad":{"status":"added","log":["Initial commit"]},"base-tile-improvement-road":{"status":"added","log":["Initial commit"]},"base-trade-rate-luxuries":{"status":"added","log":["Initial commit"]},"base-trade-rate-research":{"status":"added","log":["Initial commit"]},"base-trade-rate-tax":{"status":"added","log":["Initial commit"]},"base-unit-action-attack":{"status":"added","log":["Initial commit","Reduce `Attack` when `moves` is < 1.","Reduce `moves` when attacking.","Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-capture-city":{"status":"added","log":["Initial commit","Rework constructor to accept the target `City`."]},"base-unit-action-clear-forest":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-disembark":{"status":"added","log":["Initial commit","Rework constructor to accept the target `ITransport`."]},"base-unit-action-embark":{"status":"added","log":["Initial commit","Update `Move` dependency","Rework constructor to accept the target `ITransport`.","Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{"status":"added","log":["Initial commit","Add `UnitImprovementRegistry` via constructor and use updated `DelayedAction` constructor.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{"status":"added","log":["Initial commit","Ensure `CityNameRegistry` is used for `City` names.","Ensure local `RuleRegistry` is passed on to `City` constructor.","Repo cleansing."]},"base-unit-action-move":{"status":"added","log":["Initial commit","Extract `movementCost` and `validate` functions into members.","Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-no-orders":{"status":"added","log":["Initial commit"]},"base-unit-action-pillage":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{"status":"added","log":["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-sleep":{"status":"added","log":["Initial commit","Update to latest `DelayedAction` version and add wake condition to `Busy`","Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing.","Add labelled `Busy` `Rule` (`Sleeping`) to indicate the action being performed.","Repo cleansing."]},"base-unit-action-unload":{"status":"added","log":["Initial commit","Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"base-unit-catapult":{"status":"added","log":["Initial commit"]},"base-unit-chariot":{"status":"added","log":["Initial commit"]},"base-unit-horseman":{"status":"added","log":["Initial commit"]},"base-unit-improvement-fortified":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-improvement-veteran":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-knight":{"status":"added","log":["Initial commit"]},"base-unit-musketman":{"status":"added","log":["Initial commit","Repo cleansing."]},"base-unit-sail":{"status":"added","log":["Initial commit"]},"base-unit-settlers":{"status":"added","log":["Initial commit"]},"base-unit-spearman":{"status":"added","log":["Initial commit"]},"base-unit-swordman":{"status":"added","log":["Initial commit"]},"base-unit-trireme":{"status":"added","log":["Initial commit"]},"base-unit-type-fortifiable":{"status":"added","log":["Initial commit"]},"base-unit-type-land":{"status":"added","log":["Initial commit"]},"base-unit-type-naval-transport":{"status":"added","log":["Initial commit","Ensure type safety when using `this` to refer to `ITransport`.","Update to use latest `core-unit-transport` changes."]},"base-unit-type-naval":{"status":"added","log":["Initial commit"]},"base-unit-type-worker":{"status":"added","log":["Initial commit"]},"base-unit-warrior":{"status":"added","log":["Initial commit"]},"base-wonder-colossus":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-copernicus-observatory":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-library":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-wall":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hanging-gardens":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-lighthouse":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-magellans-expedition":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-oracle":{"status":"added","log":["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-pyramids":{"status":"added","log":["Initial commit"]},"civ1-city-happiness":{"status":"added","log":["Initial commit","Add `Temple` `Unhappiness` yield","Add effect for `Cololsseum` and `Cathedral`.","Add military wariness to `Republic` and `Democracy` governments.","Fix values for `Colosseum` and `Cathedral`.","Attempt to fix perpetual `CivilDisorder` and `Production` causing `Unit`s to become unsupported.","Fixed bug where `CivilDisorder` effects were active any time there was any `Unhappiness`.","Update to use new `Yield` mechanism. Actually, it was in part due to this module that the mechanism changed...","Fix a bug where `CivilDisorder` effects were applied even if the `City` wasn't in civil disorder.","Remove `CivilDisorder` `Yield` effects and move those to the respective `civ-`... modules.","Bump dependencies.","Consolidate `Cost` `Rule`s.","Remove unused `Rule` classes.","Rewrite to use customised `Yield`s for each property.","Update to latest version of `core-city-improvement`.","Bump dependencies."]},"civ1-city-improvement":{"status":"added","log":["Initial commit","Use correct path to `Research` `Yield`.","Add missing `CityImprovement`s.","Update to use new `CityBuild` mechanism.","Fix tests.","Add `Yield` modifiers for `Factory` etc.","Update method of processing `Yield`s.","Add requirements for a `Factory` to be built before a `PowerPlant` can be built.","Ensure only one type of `PowerPlant` can exist within a `City`.","Add missing `Yield` and `YieldModifier` `Rule`s.","Add `Corruption` `Yield` and `Effect`s of `Palace` and `Courthouse`.","Ensure `Palace` is destroyed when a `City` is captured.","Reclassify `CityImprovementMaintenanceGold` `Yield` `Rule`s as `Cost` `Rule`s.","Ensure `Corruption` is provided as expected`.","Add some basic cleanup for when `City`s are destroyed.","Update to latest version of `core-city-improvement`.","Move `Corruption` generation to `civ1-city`, where it makes more sense to exist.","Work on test coverage.","Bump dependencies.","Destroy `CityImprovement`s when a `City` is `Captured` or `Destroyed`."]},"civ1-city":{"status":"added","log":["Initial commit","If `CityGrowthRegistry` is missing expected `CityGrowth`, create and register it automatically in `setUpCity`","Bump dependencies","Add missing `Rule`s from `registerRules`.","Update `tests/lib/setUpCity` to work with updated `World`.","Fix weighting for `City#tilesWorked`.","Add `ChangeProduction` `Rule`.","Update `Capturing` `Rule` to include `capturingPlayer` as well as the previously owning `Player`.","Add `reassignWorkers` function to be called via UI.","Update `Captured` event to include both previous owner and capturing player.","Move `Captured` event to `Player` to handle `player:defeated` events.","Updates to allow setting `YieldRegistry` in `setUpCity`.","Fix bug where `Unit`s weren't destroyed when their supporting `City` was destroyed.","Rework `ProcessYield` `Rule`s to utilise new ...`Support` `Yield`s.","Remove `Rule` that empties the `FoodStorage` on shrink.","Add `Unit` `Defeated` `Rule` to handle a `City` being destroyed instead of captured.","Use updated `Yield` `Rule`s.","Slight tweak to how `Yield`s are weighted.","Update handling not adding `Production` when `City` is in `CivilDisorder`.","Process `Unit` and population support (`Food` and `Production`).","Update `CityBuild` and `ChangeProduction` instantiations with new `PlayerAction` changes.","Ensure when a `Unit` is defeated in a `City` that the population is only reduced when it's a defender.","Use `FoodExhausted` and `Unsupported` `Rule`s.","Refactor `Yield`, `Cost` and `ProcessYield` `Rule` usages.","Update `ProcessYield` usage.","Use updated `CityRegistry.getByTile` method.","Update `setUpCity` mechanism.","Ensure `Irrigation` and `Road` `TileImprovement`s are only added if they don't already exist.","Update `setUpCity` to allow bypassing of `TileImprovement` additions.","Move `Corruption` generation from `civ1-city-improvement`.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Improve test coverage.","Track `destroyed` status rather than unregister the `City`."]},"civ1-civilization":{"status":"added","log":["Initial commit","Add `Roman` `Civilization` back in.","Register all `Civilization`s.","Update registration mechanism to reduce duplication in other packages.","Repo cleansing."]},"civ1-diplomacy":{"status":"added","log":["Initial commit"]},"civ1-game-year":{"status":"added","log":["Initial commit","Ensure `registerRules` is called."]},"civ1-goody-hut":{"status":"added","log":["Initial commit","Use published package versions","Use `Unit` `Rule` to control what `Unit`s are provided.","Add `index.ts` so that `Rule`s are registered and processed.","Fix method calls and expected returns.","Add missing dependency.","Add missing `Rule`s.","Fix `FreeCity` behaviour.","Updates to `Yield` weights.","Update to use latest `CityRegistry` changes.","Update usages of `Math.random` to be an injectable number provider.","Another attempt at the `City` type of `GoodyHut`."]},"civ1-government":{"status":"added","log":["Initial commit","Prevent unhandled exception on `Changed` `Rule` when `PlayerWorld`s have not yet been initialised.","Utilise `AvailableGovernmentsRegistry` and separate `Revolution` `PlayerAction` (although TODO, change that to the request and a random delay for the `ChooseGovernment` `MandatoryAction`).","Update `GovernmentChanged` `Rule` to be compatible with `PlayerTile`s.","Update `Revolution` instantiation with new `PlayerAction` changes."]},"civ1-player":{"status":"added","log":["Initial commit","Remove `Client` and `Player` creation from here, this should be handlded by the renderer.","Try to improve performance for scoring start tiles.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Reduce starting square calculation time.","Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread.","Add `VisibilityChanged` `Rule`s.","Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s.","Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events.","Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights.","Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`.","Refactor out `Worker`. This probably needs to be added back in at some point...","Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s.","Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-science":{"status":"added","log":["Initial commit","Fix bug that prevented `ChooseResearch` `PlayerAction` from being provided.","Add missing `Rule`s.","Use external `Research` `Yield` to fix `PlayerResearch`.","Add remaining missing `Advance`s.","Fix incorrect prerequisites for `Railroad`.","Updates to randomly start with some `Advance`s.","Acquire `Advance`s when capturing an advance enemey `City`.","Fix a bug where if there are no `Advance`s available to research (or fewer than the number of granted `Advance`s will be) it'll grant as many are available.","Update handling not adding `Research` when `City` is in `CivilDisorder`.","Update `ChooseResearch` instantiation with new `PlayerAction` changes.","Update dependencies.","Add unit tests.","Ensure `@civ-clone/core-city-happiness` is used as a module, not a github repo.","Add `randomNumberGenerator` provider for `captured` `Rule`.","Remove unnecessary `Registry` interface."]},"civ1-trade-rate":{"status":"added","log":["Initial commit","Add `AdjustTradeRates` `PlayerAction`.","Simplify `Yield` `Rule`s.","Implement `Corruption` `Effect`s.","Update `AdjustTradeRates` instantiation with new `PlayerAction` changes.","Ensure `Corruption` can never exceed the available `Trade`.","Add `Player` `turn-start` `Rule` to convert `Trade` into the component `Yield`s."]},"civ1-treasury":{"status":"added","log":["Initial commit","Ensure `Rule`s are executed by `Engine`.","Add `CompleteProduction` action.","Use updated `Yield` mechanism.","Update handling not adding `Gold` when `City` is in `CivilDisorder`.","Handle running out of `Gold` in the treasury by selling the maintained `CityImprovement` that would deplete it.","Update `CompleteProduction` instantiation with new `PlayerAction` changes.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Remove unnecessary `Registry` interface."]},"civ1-unit":{"status":"added","log":["Initial commit","Update actions to pass in entities for `Disembark`, `Embark` and `CaptureCity`","Updates to `Action`s in-line with new `DelayedAction` version.","Add `CityNameRegistry` to `action` provider for `FoundCity`.","Add `Defeated` implementation to destroy `Unit`s.","Add in missing `Unit`s.","Add missing `Unit`s.","Fix `ClearX` and `PlantForest` actions and give `Ocean` `MovementCost` back to enable `Embark` again.","Correct misspelled `MechanizedInfantry`.","Update to use new `CityBuild` mechanism.","Fix tests","Add `BuildRailroad`.","Fix movement costs.","Fix bug where units could retry a failed move over and over.","Made it more likely that your `Move` would succeed (>50% of `Move`s means it'll work - in-line with Civ).","Update `ActiveUnit` and `InactiveUnit` instantiations with new `PlayerAction` changes.","Use `Unsupported` and `Stowed` `Rule`s.","Ensure `Sail` is obselete with `Magenetism`.","Simplify and clarify `Move` action constraints.","Clean up when `Unit` is `Destroyed`.","Add better test coverage.","Add missing `MovementCost`s and use named re-usable `Criterion`s for `Action` `Rule`s where possible.","Ensure `Air` `Unit`s can attack `Land` `Unit`s.","Add `Disband` `Action`.","Use `IBuildable` interface for `BuildingComplete` `Rule`s.","Ensure `Submarine`s cannot bombard `Land` `Unit`s.","Ensure only `Fighter`s can `Attack` other `Air` `Unit`s.","Annotate `Attack` `Action` `Rule`s.","Ensure all `Unit`s on a `Tile` are destroyed when the defending `Unit` is `Destroyed`, unless in a `City`.","Track `destroyed` status rather than unregister the `Unit`."]},"civ1-wonder":{"status":"added","log":["Initial commit","Add `Research` requirements for `Wonder`s.","Add tests for `Wonder` costs.","Update to work with new `setUpCity` form.","Add missing `Wonder`s.","Utilise new `CityBuild` mechanism for registering.","Fix missing cost for `DarwinsVoyage`.","Add effects for `MichelangelosChapel` and `WomensSuffrage`.","Add `Obsoletion` `Rule` to notify `Wonder` owners for obsolesence.","Move `Yield` `Rule`s to `Cost` `Rule`s to enable accurate processing.","Use updated `Yield` mechanism.","Add `CureForCancer` effects.","Add obsoletion for `Lighthouse`.","Rework the tests.","Update to remove requirement for `Player` to be passed into the `Wonder` constructor.","Fix some wonder effects.","Ensure `engine` parameter of `Wonder` `obsolete` `Rule`s is optional.","Add `Wonder` `obsolete` `Rule`s.","Ensure `IBuildable` interface is used.","Add benefits for `DarwinsVoyage`."]},"civ1-world":{"status":"added","log":["Initial commit","Add `Rule`s to `registerRules`.","Prevent double triggering of `Built` `Rule`.","Update distribution `Rule`s to use `Rule`s defined in `core-world-generator` instead of `core-terrain`.","Add `Event`s when `TileImprovement`s are `Built` or `Pillaged`.","Update `Engine` `Start` `Rule`s to meet changes to `simple-world-generator`.","Updating world generator values to generate maps closer to those from the original Civilization. More work still to do here.","Fix bug with incorrect `Yield`s for `Plains` with `Horse`.","Enable `Railroad` construction.","Fix bug where `Irrigation` and `Mine` could both exist on the same `Tile`.","Add `Railroad` `Yield` modifier.","Add updated `Tile` yields for other governments.","Update `Yield` mechanism.","Fix a few `Tile` `Yield`s.","Update calls to `Math.random` to be an injectable random number generator.","Ensure `Road` and `Railroad` are not applied multiple times.","Add support for `Earth` `Generator` and fixed start `Tile`s associated.","Move random start `Tile` selection to `Rule`s.","Use updated `civ1-earth-generator` package."]},"core-ai-client":{"status":"added","log":["Initial commit","Add missing `instance` to `AIClientRegistry` and allow `LeaderRegistry` instance to be passed in.","Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s.","Add `City` to exported fields from `DataObject#toPlainObject`.","Add `ChangeProduction` `PlayerAction` when a `City` is already building something.","Fix path reference from relative to \"absolute\" via `@civ-clone`.","Update `CityBuild#available` mechanism to show resource costs for items.","Add `Buildable` class that `Unit`s and `CityImprovement`s inherit from.","Change logic to pave the way for alternative costs associated to `Buildable` items.","Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s.","Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-growth":{"status":"added","log":["Initial commit","Fix missing `CityGrowth` `AdditionalData` from `City`s.","Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies.","Repo cleansing."]},"core-city-happiness":{"status":"added","log":["Initial commit","Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{"status":"added","log":["Initial commit","Make `CityImprovement`s extend `DataObject`.","Update to use new `Buildable` class from core-city-build.","Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead.","Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{"status":"added","log":["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-civ-client":{"status":"added","log":["Initial commit"]},"core-civilization":{"status":"added","log":["Initial commit","Update `Leader`s to be `DataObject`s.","Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-client":{"status":"added","log":["Initial commit"]},"core-data-object":{"status":"added","log":["Initial commit","Add `id` to `DataObject`s to allow easy referencing from within `Client`s.","Allow `AdditionalData` to be applied to child classes.","Change `DataObject`s to allow recursive data to be stored.","Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages.","Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)","Perform `filter`ing on all objects, rather than only `DataObject`s. This also means we can return something other than a `DataObject`.","Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage.","Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing.","Make `IDataObject` interface more flexible."]},"core-diplomacy":{"status":"added","log":["Initial commit"]},"core-engine":{"status":"added","log":["Initial commit","Add `@types/glob` as a direct dependency for dependent packages.","Prevent `Start` `Rule`s from being processed directly. Might rever this later...","Remove reliance on `node` so that a browser can be used instead."]},"core-game-year":{"status":"added","log":["Initial commit","Make `Year` extend `DataObject`.","Simpliy `Rule`s."]},"core-goody-hut":{"status":"added","log":["Initial commit","Add `Distribution` `Rule` for controlling placement of huts within `World`s.","Correct arguments for `Distribution` `Rule`.","Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s.","Simpliy `Rule`s."]},"core-government":{"status":"added","log":["Initial commit","Provide `available` `Government`s with the `PlayerGovernment` instance.","Remove `Revolution`. Move to its own package.","Need to call `super(Government)` in `ConstructorRegistry` constructor.","Simpliy `Rule`s."]},"core-player-world":{"status":"added","log":["Initial commit","Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets","Bump `core-world` version","Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered.","Refactor `PlayerWorld` to store `PlayerTile`s to allow the world changes to be hidden from players (like in the original game).","Updates to `Yield` mechanism.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{"status":"added","log":["Initial commit","Add `HiddenPlayerAction` and rename `PlayerAction`-related methods.","Update returned `DataObject` data.","Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename.","Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-registry":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{"status":"added","log":["Initial commit","Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`.","Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`.","Simpliy `Rule`s."]},"core-terrain-feature":{"status":"added","log":["Initial commit","Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{"status":"added","log":["Initial commit","Remove unused `Rule`s.","Simpliy `Rule`s."]},"core-tile-improvement":{"status":"added","log":["Initial commit","Ensure `TileImprovement`s extend `DataObject`.","Simpliy `Rule`s."]},"core-trade-rate":{"status":"added","log":["Initial commit","Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`.","Add convenience method `PlayerTradeRates#setAll` to offload the `balance` functionality to the frontend.","Repo cleansing."]},"core-treasury":{"status":"added","log":["Initial commit","Add `terasury` `AdditionalData` to `Player`s.","Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{"status":"added","log":["Initial commit","Add `engine:start` event handler.","Add missing events to trigger `Rule`s.","Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`.","Ensure return types match for TypeScript compiler."]},"core-unit-improvement":{"status":"added","log":["Initial commit copied from https://github.com/dom111/civ-clone","Ensure `UnitImprovement`s are `DataObject`s."]},"core-unit-transport":{"status":"added","log":["Initial commit","Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies.","Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{"status":"added","log":["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"core-wonder":{"status":"added","log":["Initial commit","Add missing `instance` to `WonderRegistry`","Add `getByCity` method to `WonderRegistry`","Add event to trigger when `Wonder`s are obsoleted.","Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world-generator":{"status":"added","log":["Initial commit","Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere.","Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"core-world-path":{"status":"added","log":["Initial commit"]},"core-world":{"status":"added","log":["Initial commit","Ensure `undefined` is never added to a `Yield`.","Fix caching issue when `Yield`s get modified after caching.","Fix a bug when `Tile` `Yield`s exist for which weights are not provided.","Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`.","Ensure `World#build` handles async `Generator#generate`.","Have `World#build` return `Promise<World>` to help with tests in other packages.","Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{"status":"added","log":["Initial commit","Ensure `YieldValue` extends `DataObject`.","Remove `YieldValue` value object, the high usage combined with `ulid` from `DataObject` was causing slowdowns and didn't need to be a `DataObject` at all.","Add `reduceYields` utility function.","Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{"status":"added","log":["Initial commit","Update how `PlayerAction`s are named.","Updates to use updated `GoodyHutRegistry#getByTile`.","Prevent infinite loop and output debug info.","Updates to prevent TypeScript being sad about the `catch (e)`, `reject(e)` flow.","Add `EndTurn` support.","Add methods for catching when `City`s or `Unit`s are captured or defeated.","Fix the test suite.","Fix `SimpleAIClient` to use the new `CityBuild` mechanism.","Updates to utilise updated `PlayerWorld`.","Update dependencies and fix tests.","Add hard-coded check for `Earth` map to ensure first `City` is built in the right place."]}}}
,
{"version":"0.0.0","date":"1996-06-30T21:04:20.000Z","localChanges":["The moment when, after many years\n\nof hard work and a long voyage\n\nyou stand in the centre of your room,\n\nhouse, half-acre, square mile, island, country,\n\nknowing at last how you got there,\n\nand say, I own this,\n\n        \n\nis the same moment when the trees unloose\n\ntheir soft arms from around you,\n\nthe birds take back their language,\n\nthe cliffs fissure and collapse,\n\nthe air moves back from you like a wave\n\nand you can't breathe.\n\n\n\nNo, they whisper. You own nothing.\n\nYou were a visitor, time after time\n\nclimbing the hill, planting the flag, proclaiming.\n\nWe never belonged to you.\n\nYou never found us.\n\nIt was always the other way round."],"externalChanges":{}}
]
