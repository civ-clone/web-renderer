{"version":"0.1.0@93bb88d","date":"2022-11-09T21:54:44.000Z","localChanges":["Ensure `City` `Yield`s are updated when `Unit`s are moved or destroyed.","Update `City` display screen to be closer to the original game."],"externalChanges":{"base-city-yield-city-improvement-maintenance-gold":{"status":"updated","log":["Make class extend `Gold` `Yield` and store the value negated."]},"base-city-yield-city-improvement-content":{"status":"added","log":["Initial commit","Ensure `CityImprovement` is exposed."]},"base-city-yield-corruption":{"status":"updated","log":["Make class extend `Trade` `Yield` and store the value negated."]},"base-city-yield-population-support-food":{"status":"updated","log":["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-luxury-happiness":{"status":"added","log":["Initial commit"]},"base-city-yield-martial-law-content":{"status":"added","log":["Initial commit","Ensure `unit` key is exposed."]},"base-city-yield-military-unhappiness":{"status":"added","log":["Initial commit","Ensure `unit` key is exposed when the `Yield` is exported as raw data."]},"base-city-yield-population-unhappiness":{"status":"added","log":["Initial commit"]},"base-city-yield-unit-support-food":{"status":"updated","log":["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-production":{"status":"updated","log":["Make class extend `Production` `Yield` and store the value negated."]},"base-goody-hut-unit":{"status":"updated","log":["Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-player-action-active-unit":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-adjust-trade-rates":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-inactive-unit":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-revolution":{"status":"updated","log":["Update dependencies and add generic property for `PlayerAction`."]},"base-unit-action-attack":{"status":"updated","log":["Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-forest":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-embark":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{"status":"updated","log":["Ensure local `RuleRegistry` is passed on to `City` constructor."]},"base-unit-action-move":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-pillage":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{"status":"updated","log":["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-type-naval-transport":{"status":"updated","log":["Update to use latest `core-unit-transport` changes."]},"civ1-city-happiness":{"status":"updated","log":["Bump dependencies.","Consolidate `Cost` `Rule`s.","Remove unused `Rule` classes.","Rewrite to use customised `Yield`s for each property.","Update to latest version of `core-city-improvement`."]},"civ1-city-improvement":{"status":"updated","log":["Reclassify `CityImprovementMaintenanceGold` `Yield` `Rule`s as `Cost` `Rule`s.","Ensure `Corruption` is provided as expected`.","Add some basic cleanup for when `City`s are destroyed.","Update to latest version of `core-city-improvement`.","Move `Corruption` generation to `civ1-city`, where it makes more sense to exist.","Work on test coverage.","Bump dependencies."]},"civ1-city":{"status":"updated","log":["Update `CityBuild` and `ChangeProduction` instantiations with new `PlayerAction` changes.","Ensure when a `Unit` is defeated in a `City` that the population is only reduced when it's a defender.","Use `FoodExhausted` and `Unsupported` `Rule`s.","Refactor `Yield`, `Cost` and `ProcessYield` `Rule` usages.","Update `ProcessYield` usage.","Use updated `CityRegistry.getByTile` method.","Update `setUpCity` mechanism.","Ensure `Irrigation` and `Road` `TileImprovement`s are only added if they don't already exist.","Update `setUpCity` to allow bypassing of `TileImprovement` additions.","Move `Corruption` generation from `civ1-city-improvement`.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Improve test coverage."]},"civ1-civilization":{"status":"updated","log":["Repo cleansing."]},"civ1-goody-hut":{"status":"updated","log":["Update to use latest `CityRegistry` changes.","Update usages of `Math.random` to be an injectable number provider.","Another attempt at the `City` type of `GoodyHut`."]},"civ1-government":{"status":"updated","log":["Update `Revolution` instantiation with new `PlayerAction` changes."]},"civ1-player":{"status":"updated","log":["Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`."]},"civ1-science":{"status":"updated","log":["Update `ChooseResearch` instantiation with new `PlayerAction` changes.","Update dependencies.","Add unit tests.","Ensure `@civ-clone/core-city-happiness` is used as a module, not a github repo.","Add `randomNumberGenerator` provider for `captured` `Rule`."]},"civ1-trade-rate":{"status":"updated","log":["Update `AdjustTradeRates` instantiation with new `PlayerAction` changes.","Ensure `Corruption` can never exceed the available `Trade`.","Add `Player` `turn-start` `Rule` to convert `Trade` into the component `Yield`s."]},"civ1-treasury":{"status":"updated","log":["Update `CompleteProduction` instantiation with new `PlayerAction` changes.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo."]},"civ1-unit":{"status":"updated","log":["Update `ActiveUnit` and `InactiveUnit` instantiations with new `PlayerAction` changes.","Use `Unsupported` and `Stowed` `Rule`s.","Ensure `Sail` is obselete with `Magenetism`.","Simplify and clarify `Move` action constraints.","Clean up when `Unit` is `Destroyed`.","Add better test coverage.","Add missing `MovementCost`s and use named re-usable `Criterion`s for `Action` `Rule`s where possible.","Ensure `Air` `Unit`s can attack `Land` `Unit`s."]},"civ1-wonder":{"status":"updated","log":["Use updated `Yield` mechanism.","Add `CureForCancer` effects.","Add obsoletion for `Lighthouse`.","Rework the tests.","Update to remove requirement for `Player` to be passed into the `Wonder` constructor.","Fix some wonder effects.","Ensure `engine` parameter of `Wonder` `obsolete` `Rule`s is optional.","Add `Wonder` `obsolete` `Rule`s."]},"civ1-world":{"status":"updated","log":["Update calls to `Math.random` to be an injectable random number generator.","Ensure `Road` and `Railroad` are not applied multiple times."]},"core-ai-client":{"status":"updated","log":["Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{"status":"updated","log":["Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s."]},"core-city-growth":{"status":"updated","log":["Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies."]},"core-city-happiness":{"status":"updated","log":["Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{"status":"updated","log":["Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead."]},"core-city":{"status":"updated","log":["Change `CityRegistry.getByTile` to return `City` instead of `City[]`."]},"core-civilization":{"status":"updated","log":["Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-data-object":{"status":"updated","log":["Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage."]},"core-game-year":{"status":"updated","log":["Simpliy `Rule`s."]},"core-goody-hut":{"status":"updated","log":["Simpliy `Rule`s."]},"core-government":{"status":"updated","log":["Simpliy `Rule`s."]},"core-player-world":{"status":"updated","log":["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{"status":"updated","log":["Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename."]},"core-registry":{"status":"updated","log":["Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{"status":"updated","log":["Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{"status":"updated","log":["Simpliy `Rule`s."]},"core-terrain-feature":{"status":"updated","log":["Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{"status":"updated","log":["Simpliy `Rule`s."]},"core-tile-improvement":{"status":"updated","log":["Simpliy `Rule`s."]},"core-treasury":{"status":"updated","log":["Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{"status":"updated","log":["Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`."]},"core-unit-transport":{"status":"updated","log":["Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies."]},"core-unit":{"status":"updated","log":["Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings."]},"core-wonder":{"status":"updated","log":["Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world":{"status":"updated","log":["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{"status":"updated","log":["Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{"status":"updated","log":["Update dependencies and fix tests."]},"simple-world-generator":{"status":"updated","log":["Ensure `TerrainFeatureRegistry` is passed in to `simpleRLELoader`.","Replace `Math.random` calls with injectable random number generator."]}}}
